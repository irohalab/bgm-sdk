/**
 * Bangumi API
 * 你可以在 <https://api.bgm.tv/v0/oauth/> 生成一个 Access Token  ## 建议客户端开发者指定一个带有 APP 名称和版本的 User Agent，而非使用 HTTP 请求库默认的 UA  各种请求库的默认 UA 在未来可能会被禁用。 
 *
 * The version of the OpenAPI document: 2022-05-3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { CharacterDetail } from '../model/characterDetail';
import { CharacterPerson } from '../model/characterPerson';
import { CharacterRevision } from '../model/characterRevision';
import { CollectionStatusType } from '../model/collectionStatusType';
import { CollectionType } from '../model/collectionType';
import { DetailedRevision } from '../model/detailedRevision';
import { EpStatusType } from '../model/epStatusType';
import { EpType } from '../model/epType';
import { EpisodeDetail } from '../model/episodeDetail';
import { ErrorDetail } from '../model/errorDetail';
import { Index } from '../model/index';
import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { InlineResponse2002 } from '../model/inlineResponse2002';
import { InlineResponse2003 } from '../model/inlineResponse2003';
import { InlineResponse2004 } from '../model/inlineResponse2004';
import { InlineResponse2005 } from '../model/inlineResponse2005';
import { PagedEpisode } from '../model/pagedEpisode';
import { PagedIndexSubject } from '../model/pagedIndexSubject';
import { PagedRevision } from '../model/pagedRevision';
import { PagedUserCollection } from '../model/pagedUserCollection';
import { PersonCharacter } from '../model/personCharacter';
import { PersonDetail } from '../model/personDetail';
import { PersonRevision } from '../model/personRevision';
import { PolApiV0ModelsRelatedSubject } from '../model/polApiV0ModelsRelatedSubject';
import { PolApiV0ModelsSubjectRelatedSubject } from '../model/polApiV0ModelsSubjectRelatedSubject';
import { RelatedCharacter } from '../model/relatedCharacter';
import { RelatedPerson } from '../model/relatedPerson';
import { ResponseGroup } from '../model/responseGroup';
import { StatusCode } from '../model/statusCode';
import { Subject } from '../model/subject';
import { SubjectRevision } from '../model/subjectRevision';
import { SubjectType } from '../model/subjectType';
import { SubjectTypeName } from '../model/subjectTypeName';
import { User1 } from '../model/user1';

import { COLLECTION_FORMATS }  from '../variables';
import { DefaultServiceInterface }  from './default.serviceInterface';



@injectable()
export class DefaultService implements DefaultServiceInterface {
    private basePath: string = 'https://api.bgm.tv';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 批量更新收视进度
     * 
     * @param subject_id 条目 ID
     * @param watched_eps 如看到 123 话则 POST &#x60;123&#x60; &lt;br&gt; 书籍条目传 watched_eps 与 watched_vols 至少其一
     * @param watched_vols 如看到第 3 卷则 POST &#x60;3&#x60;, 仅对书籍条目有效
     
     */
    public batchUpdateEpisodeStatusBySubjectId(subject_id: number, watched_eps: string, watched_vols?: string, observe?: 'body', headers?: Headers): Observable<StatusCode>;
    public batchUpdateEpisodeStatusBySubjectId(subject_id: number, watched_eps: string, watched_vols?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<StatusCode>>;
    public batchUpdateEpisodeStatusBySubjectId(subject_id: number, watched_eps: string, watched_vols?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling batchUpdateEpisodeStatusBySubjectId.');
        }

        if (watched_eps === null || watched_eps === undefined){
            throw new Error('Required parameter watched_eps was null or undefined when calling batchUpdateEpisodeStatusBySubjectId.');
        }

        let queryParameters: string[] = [];
        if (watched_eps !== undefined) {
            queryParameters.push('watched_eps='+encodeURIComponent(String(watched_eps)));
        }
        if (watched_vols !== undefined) {
            queryParameters.push('watched_vols='+encodeURIComponent(String(watched_vols)));
        }

        // authentication (HTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<StatusCode>> = this.httpClient.post(`${this.basePath}/subject/${encodeURIComponent(String(subject_id))}/update/watched_eps?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <StatusCode>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 每日放送
     * 
     
     */
    public getCalendar(observe?: 'body', headers?: Headers): Observable<Array<InlineResponse2003>>;
    public getCalendar(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<InlineResponse2003>>>;
    public getCalendar(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<InlineResponse2003>>> = this.httpClient.get(`${this.basePath}/calendar`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<InlineResponse2003>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Character Detail
     * cache with 60s
     * @param character_id 
     
     */
    public getCharacterById(character_id: number, observe?: 'body', headers?: Headers): Observable<CharacterDetail>;
    public getCharacterById(character_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<CharacterDetail>>;
    public getCharacterById(character_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getCharacterById.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<CharacterDetail>> = this.httpClient.get(`${this.basePath}/v0/characters/${encodeURIComponent(String(character_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CharacterDetail>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Character Revision
     * 
     * @param revision_id 
     
     */
    public getCharacterRevisionByRevisionId(revision_id: number, observe?: 'body', headers?: Headers): Observable<CharacterRevision>;
    public getCharacterRevisionByRevisionId(revision_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<CharacterRevision>>;
    public getCharacterRevisionByRevisionId(revision_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (revision_id === null || revision_id === undefined){
            throw new Error('Required parameter revision_id was null or undefined when calling getCharacterRevisionByRevisionId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<CharacterRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/characters/${encodeURIComponent(String(revision_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CharacterRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Character Revisions
     * 
     * @param character_id 
     * @param limit 
     * @param offset 
     
     */
    public getCharacterRevisions(character_id: number, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedRevision>;
    public getCharacterRevisions(character_id: number, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedRevision>>;
    public getCharacterRevisions(character_id: number, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getCharacterRevisions.');
        }

        let queryParameters: string[] = [];
        if (character_id !== undefined) {
            queryParameters.push('character_id='+encodeURIComponent(String(character_id)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/characters?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取指定条目收藏信息
     * 
     * @param subject_id 条目 ID
     
     */
    public getCollectionBySubjectId(subject_id: number, observe?: 'body', headers?: Headers): Observable<InlineResponse2005>;
    public getCollectionBySubjectId(subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<InlineResponse2005>>;
    public getCollectionBySubjectId(subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getCollectionBySubjectId.');
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<InlineResponse2005>> = this.httpClient.get(`${this.basePath}/collection/${encodeURIComponent(String(subject_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <InlineResponse2005>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Episode
     * 
     * @param episode_id 
     
     */
    public getEpisodeById(episode_id: number, observe?: 'body', headers?: Headers): Observable<EpisodeDetail>;
    public getEpisodeById(episode_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<EpisodeDetail>>;
    public getEpisodeById(episode_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (episode_id === null || episode_id === undefined){
            throw new Error('Required parameter episode_id was null or undefined when calling getEpisodeById.');
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<EpisodeDetail>> = this.httpClient.get(`${this.basePath}/v0/episodes/${encodeURIComponent(String(episode_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EpisodeDetail>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Episode Revision
     * 
     * @param revision_id 
     
     */
    public getEpisodeRevisionByRevisionId(revision_id: number, observe?: 'body', headers?: Headers): Observable<DetailedRevision>;
    public getEpisodeRevisionByRevisionId(revision_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<DetailedRevision>>;
    public getEpisodeRevisionByRevisionId(revision_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (revision_id === null || revision_id === undefined){
            throw new Error('Required parameter revision_id was null or undefined when calling getEpisodeRevisionByRevisionId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<DetailedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/episodes/${encodeURIComponent(String(revision_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DetailedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Episode Revisions
     * 
     * @param episode_id 
     * @param limit 
     * @param offset 
     
     */
    public getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedRevision>;
    public getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedRevision>>;
    public getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (episode_id === null || episode_id === undefined){
            throw new Error('Required parameter episode_id was null or undefined when calling getEpisodeRevisions.');
        }

        let queryParameters: string[] = [];
        if (episode_id !== undefined) {
            queryParameters.push('episode_id='+encodeURIComponent(String(episode_id)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/episodes?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 更新收视进度
     * 
     * @param id 章节 ID
     * @param status 收视类型，参考 [EpStatusType](#model-EpStatusType)
     
     */
    public getEpisodeStatus(id: number, status: EpStatusType, observe?: 'body', headers?: Headers): Observable<StatusCode>;
    public getEpisodeStatus(id: number, status: EpStatusType, observe?: 'response', headers?: Headers): Observable<HttpResponse<StatusCode>>;
    public getEpisodeStatus(id: number, status: EpStatusType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling getEpisodeStatus.');
        }

        if (status === null || status === undefined){
            throw new Error('Required parameter status was null or undefined when calling getEpisodeStatus.');
        }

        // authentication (HTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<StatusCode>> = this.httpClient.get(`${this.basePath}/ep/${encodeURIComponent(String(id))}/status/${encodeURIComponent(String(status))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <StatusCode>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Episodes
     * 
     * @param subject_id 
     * @param type 参照章节的&#x60;type&#x60;
     * @param limit 
     * @param offset 
     
     */
    public getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedEpisode>;
    public getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedEpisode>>;
    public getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getEpisodes.');
        }

        let queryParameters: string[] = [];
        if (subject_id !== undefined) {
            queryParameters.push('subject_id='+encodeURIComponent(String(subject_id)));
        }
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedEpisode>> = this.httpClient.get(`${this.basePath}/v0/episodes?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedEpisode>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Index By Id
     * 
     * @param index_id 
     
     */
    public getIndexById(index_id: number, observe?: 'body', headers?: Headers): Observable<Index>;
    public getIndexById(index_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Index>>;
    public getIndexById(index_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling getIndexById.');
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Index>> = this.httpClient.get(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Index>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Index Subjects
     * 
     * @param index_id 
     * @param type 
     * @param limit 
     * @param offset 
     
     */
    public getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedIndexSubject>;
    public getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedIndexSubject>>;
    public getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling getIndexSubjectsByIndexId.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedIndexSubject>> = this.httpClient.get(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}/subjects?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedIndexSubject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get User
     * 返回当前 Access Token 对应的用户信息
     
     */
    public getMyself(observe?: 'body', headers?: Headers): Observable<User1>;
    public getMyself(observe?: 'response', headers?: Headers): Observable<HttpResponse<User1>>;
    public getMyself(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (HTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<User1>> = this.httpClient.get(`${this.basePath}/v0/me`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <User1>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Person
     * cache with 60s
     * @param person_id 
     
     */
    public getPersonById(person_id: number, observe?: 'body', headers?: Headers): Observable<PersonDetail>;
    public getPersonById(person_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonDetail>>;
    public getPersonById(person_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getPersonById.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PersonDetail>> = this.httpClient.get(`${this.basePath}/v0/persons/${encodeURIComponent(String(person_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PersonDetail>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Person Revision
     * 
     * @param revision_id 
     
     */
    public getPersonRevisionByRevisionId(revision_id: number, observe?: 'body', headers?: Headers): Observable<PersonRevision>;
    public getPersonRevisionByRevisionId(revision_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonRevision>>;
    public getPersonRevisionByRevisionId(revision_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (revision_id === null || revision_id === undefined){
            throw new Error('Required parameter revision_id was null or undefined when calling getPersonRevisionByRevisionId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PersonRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/persons/${encodeURIComponent(String(revision_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PersonRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Person Revisions
     * 
     * @param person_id 
     * @param limit 
     * @param offset 
     
     */
    public getPersonRevisions(person_id: number, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedRevision>;
    public getPersonRevisions(person_id: number, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedRevision>>;
    public getPersonRevisions(person_id: number, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getPersonRevisions.');
        }

        let queryParameters: string[] = [];
        if (person_id !== undefined) {
            queryParameters.push('person_id='+encodeURIComponent(String(person_id)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/persons?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * get person related characters
     * 
     * @param person_id 
     
     */
    public getRelatedCharactersByPersonId(person_id: number, observe?: 'body', headers?: Headers): Observable<Array<PersonCharacter>>;
    public getRelatedCharactersByPersonId(person_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonCharacter>>>;
    public getRelatedCharactersByPersonId(person_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getRelatedCharactersByPersonId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<PersonCharacter>>> = this.httpClient.get(`${this.basePath}/v0/persons/${encodeURIComponent(String(person_id))}/characters`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<PersonCharacter>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Characters
     * 
     * @param subject_id 
     
     */
    public getRelatedCharactersBySubjectId(subject_id: number, observe?: 'body', headers?: Headers): Observable<Array<RelatedCharacter>>;
    public getRelatedCharactersBySubjectId(subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<RelatedCharacter>>>;
    public getRelatedCharactersBySubjectId(subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getRelatedCharactersBySubjectId.');
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<RelatedCharacter>>> = this.httpClient.get(`${this.basePath}/v0/subjects/${encodeURIComponent(String(subject_id))}/characters`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<RelatedCharacter>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * get character related persons
     * 
     * @param character_id 
     
     */
    public getRelatedPersonsByCharacterId(character_id: number, observe?: 'body', headers?: Headers): Observable<Array<CharacterPerson>>;
    public getRelatedPersonsByCharacterId(character_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<CharacterPerson>>>;
    public getRelatedPersonsByCharacterId(character_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getRelatedPersonsByCharacterId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<CharacterPerson>>> = this.httpClient.get(`${this.basePath}/v0/characters/${encodeURIComponent(String(character_id))}/persons`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<CharacterPerson>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Persons
     * 
     * @param subject_id 
     
     */
    public getRelatedPersonsBySubjectId(subject_id: number, observe?: 'body', headers?: Headers): Observable<Array<RelatedPerson>>;
    public getRelatedPersonsBySubjectId(subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<RelatedPerson>>>;
    public getRelatedPersonsBySubjectId(subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getRelatedPersonsBySubjectId.');
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<RelatedPerson>>> = this.httpClient.get(`${this.basePath}/v0/subjects/${encodeURIComponent(String(subject_id))}/persons`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<RelatedPerson>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * get character related subjects
     * 
     * @param character_id 
     
     */
    public getRelatedSubjectsByCharacterId(character_id: number, observe?: 'body', headers?: Headers): Observable<Array<PolApiV0ModelsRelatedSubject>>;
    public getRelatedSubjectsByCharacterId(character_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PolApiV0ModelsRelatedSubject>>>;
    public getRelatedSubjectsByCharacterId(character_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getRelatedSubjectsByCharacterId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<PolApiV0ModelsRelatedSubject>>> = this.httpClient.get(`${this.basePath}/v0/characters/${encodeURIComponent(String(character_id))}/subjects`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<PolApiV0ModelsRelatedSubject>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * get person related subjects
     * 
     * @param person_id 
     
     */
    public getRelatedSubjectsByPersonId(person_id: number, observe?: 'body', headers?: Headers): Observable<Array<PolApiV0ModelsRelatedSubject>>;
    public getRelatedSubjectsByPersonId(person_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PolApiV0ModelsRelatedSubject>>>;
    public getRelatedSubjectsByPersonId(person_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getRelatedSubjectsByPersonId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<PolApiV0ModelsRelatedSubject>>> = this.httpClient.get(`${this.basePath}/v0/persons/${encodeURIComponent(String(person_id))}/subjects`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<PolApiV0ModelsRelatedSubject>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Relations
     * 
     * @param subject_id 
     
     */
    public getRelatedSubjectsBySubjectId(subject_id: number, observe?: 'body', headers?: Headers): Observable<Array<PolApiV0ModelsSubjectRelatedSubject>>;
    public getRelatedSubjectsBySubjectId(subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PolApiV0ModelsSubjectRelatedSubject>>>;
    public getRelatedSubjectsBySubjectId(subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getRelatedSubjectsBySubjectId.');
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<PolApiV0ModelsSubjectRelatedSubject>>> = this.httpClient.get(`${this.basePath}/v0/subjects/${encodeURIComponent(String(subject_id))}/subjects`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<PolApiV0ModelsSubjectRelatedSubject>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取条目
     * cache with 300s
     * @param subject_id 
     
     */
    public getSubjectById(subject_id: number, observe?: 'body', headers?: Headers): Observable<Subject>;
    public getSubjectById(subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Subject>>;
    public getSubjectById(subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getSubjectById.');
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Subject>> = this.httpClient.get(`${this.basePath}/v0/subjects/${encodeURIComponent(String(subject_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Subject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Revision
     * 
     * @param revision_id 
     
     */
    public getSubjectRevisionByRevisionId(revision_id: number, observe?: 'body', headers?: Headers): Observable<SubjectRevision>;
    public getSubjectRevisionByRevisionId(revision_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<SubjectRevision>>;
    public getSubjectRevisionByRevisionId(revision_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (revision_id === null || revision_id === undefined){
            throw new Error('Required parameter revision_id was null or undefined when calling getSubjectRevisionByRevisionId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<SubjectRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/subjects/${encodeURIComponent(String(revision_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SubjectRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Revisions
     * 
     * @param subject_id 
     * @param limit 
     * @param offset 
     
     */
    public getSubjectRevisions(subject_id: number, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedRevision>;
    public getSubjectRevisions(subject_id: number, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedRevision>>;
    public getSubjectRevisions(subject_id: number, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getSubjectRevisions.');
        }

        let queryParameters: string[] = [];
        if (subject_id !== undefined) {
            queryParameters.push('subject_id='+encodeURIComponent(String(subject_id)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/subjects?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get User by name
     * 获取用户信息，设置了 username 之后无法使用 UID 查询。
     * @param username 
     
     */
    public getUserByName(username: string, observe?: 'body', headers?: Headers): Observable<User1>;
    public getUserByName(username: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<User1>>;
    public getUserByName(username: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserByName.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<User1>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <User1>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 用户收藏统计
     * 
     * @param username 用户名 &lt;br&gt; 也可使用 UID
     * @param app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
     
     */
    public getUserCollectionStatusByUsername(username: string, app_id: string, observe?: 'body', headers?: Headers): Observable<Array<InlineResponse2001>>;
    public getUserCollectionStatusByUsername(username: string, app_id: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<InlineResponse2001>>>;
    public getUserCollectionStatusByUsername(username: string, app_id: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserCollectionStatusByUsername.');
        }

        if (app_id === null || app_id === undefined){
            throw new Error('Required parameter app_id was null or undefined when calling getUserCollectionStatusByUsername.');
        }

        let queryParameters: string[] = [];
        if (app_id !== undefined) {
            queryParameters.push('app_id='+encodeURIComponent(String(app_id)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<InlineResponse2001>>> = this.httpClient.get(`${this.basePath}/user/${encodeURIComponent(String(username))}/collections/status?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<InlineResponse2001>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 用户收藏概览
     * 
     * @param username 用户名 &lt;br&gt; 也可使用 UID
     * @param subject_type 条目类型，详见 [SubjectTypeName](#model-SubjectTypeName)
     * @param app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
     * @param max_results 显示条数 &lt;br&gt; 最多 25
     
     */
    public getUserCollectionsBySubjectType(username: string, subject_type: SubjectTypeName, app_id: string, max_results?: number, observe?: 'body', headers?: Headers): Observable<Array<InlineResponse200>>;
    public getUserCollectionsBySubjectType(username: string, subject_type: SubjectTypeName, app_id: string, max_results?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<InlineResponse200>>>;
    public getUserCollectionsBySubjectType(username: string, subject_type: SubjectTypeName, app_id: string, max_results?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserCollectionsBySubjectType.');
        }

        if (subject_type === null || subject_type === undefined){
            throw new Error('Required parameter subject_type was null or undefined when calling getUserCollectionsBySubjectType.');
        }

        if (app_id === null || app_id === undefined){
            throw new Error('Required parameter app_id was null or undefined when calling getUserCollectionsBySubjectType.');
        }

        let queryParameters: string[] = [];
        if (app_id !== undefined) {
            queryParameters.push('app_id='+encodeURIComponent(String(app_id)));
        }
        if (max_results !== undefined) {
            queryParameters.push('max_results='+encodeURIComponent(String(max_results)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<InlineResponse200>>> = this.httpClient.get(`${this.basePath}/user/${encodeURIComponent(String(username))}/collections/${encodeURIComponent(String(subject_type))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<InlineResponse200>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取用户收藏
     * 获取对应用户的收藏，查看私有收藏需要access token。
     * @param username 设置了 username 后无法使用UID
     * @param subject_type 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
     * @param type 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
     * @param limit 
     * @param offset 
     
     */
    public getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: CollectionType, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedUserCollection>;
    public getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: CollectionType, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedUserCollection>>;
    public getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: CollectionType, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserCollectionsByUsername.');
        }

        let queryParameters: string[] = [];
        if (subject_type !== undefined) {
            queryParameters.push('subject_type='+encodeURIComponent(String(subject_type)));
        }
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedUserCollection>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}/collections?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedUserCollection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 用户收视进度
     * 
     * @param username 用户名 &lt;br&gt; 也可使用 UID
     * @param subject_id 条目 ID &lt;br&gt; 获取指定条目收视进度
     
     */
    public getUserProgressByUsername(username: string, subject_id?: number, observe?: 'body', headers?: Headers): Observable<Array<InlineResponse2002>>;
    public getUserProgressByUsername(username: string, subject_id?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<InlineResponse2002>>>;
    public getUserProgressByUsername(username: string, subject_id?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserProgressByUsername.');
        }

        let queryParameters: string[] = [];
        if (subject_id !== undefined) {
            queryParameters.push('subject_id='+encodeURIComponent(String(subject_id)));
        }

        // authentication (OptionalHTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<InlineResponse2002>>> = this.httpClient.get(`${this.basePath}/user/${encodeURIComponent(String(username))}/progress?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<InlineResponse2002>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 条目搜索
     * 
     * @param keywords 关键词 &lt;br&gt; 需要 URL Encode
     * @param type 条目类型，参考 [SubjectType](#model-SubjectType)
     * @param responseGroup 返回数据大小，参考 [ResponseGroup](#model-ResponseGroup) &lt;br&gt; 默认为 small
     * @param start 开始条数
     * @param max_results 每页条数 &lt;br&gt; 最多 25
     
     */
    public searchSubjectByKeywords(keywords: string, type?: SubjectType, responseGroup?: ResponseGroup, start?: number, max_results?: number, observe?: 'body', headers?: Headers): Observable<InlineResponse2004>;
    public searchSubjectByKeywords(keywords: string, type?: SubjectType, responseGroup?: ResponseGroup, start?: number, max_results?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<InlineResponse2004>>;
    public searchSubjectByKeywords(keywords: string, type?: SubjectType, responseGroup?: ResponseGroup, start?: number, max_results?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (keywords === null || keywords === undefined){
            throw new Error('Required parameter keywords was null or undefined when calling searchSubjectByKeywords.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (responseGroup !== undefined) {
            queryParameters.push('responseGroup='+encodeURIComponent(String(responseGroup)));
        }
        if (start !== undefined) {
            queryParameters.push('start='+encodeURIComponent(String(start)));
        }
        if (max_results !== undefined) {
            queryParameters.push('max_results='+encodeURIComponent(String(max_results)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<InlineResponse2004>> = this.httpClient.get(`${this.basePath}/search/subject/${encodeURIComponent(String(keywords))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <InlineResponse2004>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 管理收藏
     * 管理收藏。Content-type必须为multipart/form-data或application/x-www-form-urlencoded，参数都得放在body里。
     * @param subject_id 条目 ID
     * @param action 收藏动作 &lt;br&gt; create &#x3D; 添加收藏 &lt;br&gt; update &#x3D; 更新收藏 &lt;br&gt; 可以统一使用 &#x60;update&#x60;，系统会自动判断需要新建还是更新收藏
     * @param status 
     * @param comment 简评
     * @param tags 标签 &lt;br&gt; 以半角空格分割
     * @param rating 评分 &lt;br&gt; 1-10 &lt;br&gt; 不填默认重置为未评分
     * @param privacy 收藏隐私 &lt;br&gt; 0 &#x3D; 公开 &lt;br&gt; 1 &#x3D; 私密 &lt;br&gt; 不填默认为0
     
     */
    public updateCollectionBySubjectIdWithAction(subject_id: number, action: 'create' | 'update', status: CollectionStatusType, comment?: string, tags?: string, rating?: number, privacy?: number, observe?: 'body', headers?: Headers): Observable<InlineResponse2005>;
    public updateCollectionBySubjectIdWithAction(subject_id: number, action: 'create' | 'update', status: CollectionStatusType, comment?: string, tags?: string, rating?: number, privacy?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<InlineResponse2005>>;
    public updateCollectionBySubjectIdWithAction(subject_id: number, action: 'create' | 'update', status: CollectionStatusType, comment?: string, tags?: string, rating?: number, privacy?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling updateCollectionBySubjectIdWithAction.');
        }

        if (action === null || action === undefined){
            throw new Error('Required parameter action was null or undefined when calling updateCollectionBySubjectIdWithAction.');
        }

        if (status === null || status === undefined){
            throw new Error('Required parameter status was null or undefined when calling updateCollectionBySubjectIdWithAction.');
        }

        // authentication (HTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
        if (status !== undefined) {
            formData.append('status', <any>status);
        }
        if (comment !== undefined) {
            formData.append('comment', <any>comment);
        }
        if (tags !== undefined) {
            formData.append('tags', <any>tags);
        }
        if (rating !== undefined) {
            formData.append('rating', <any>rating);
        }
        if (privacy !== undefined) {
            formData.append('privacy', <any>privacy);
        }

        const response: Observable<HttpResponse<InlineResponse2005>> = this.httpClient.post(`${this.basePath}/collection/${encodeURIComponent(String(subject_id))}/${encodeURIComponent(String(action))}`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <InlineResponse2005>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 更新收视进度
     * 
     * @param id 章节 ID
     * @param status 收视类型，参考 [EpStatusType](#model-EpStatusType)
     * @param ep_id 使用 POST 批量更新 &lt;br&gt; 将章节以半角逗号分隔，如 &#x60;3697,3698,3699&#x60;。请求时 URL 中的 ep_id 为最后一个章节 ID
     
     */
    public updateEpisodeStatus(id: number, status: EpStatusType, ep_id?: string, observe?: 'body', headers?: Headers): Observable<StatusCode>;
    public updateEpisodeStatus(id: number, status: EpStatusType, ep_id?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<StatusCode>>;
    public updateEpisodeStatus(id: number, status: EpStatusType, ep_id?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling updateEpisodeStatus.');
        }

        if (status === null || status === undefined){
            throw new Error('Required parameter status was null or undefined when calling updateEpisodeStatus.');
        }

        let queryParameters: string[] = [];
        if (ep_id !== undefined) {
            queryParameters.push('ep_id='+encodeURIComponent(String(ep_id)));
        }

        // authentication (HTTPBearer) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<StatusCode>> = this.httpClient.post(`${this.basePath}/ep/${encodeURIComponent(String(id))}/status/${encodeURIComponent(String(status))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <StatusCode>(httpResponse.response))
               );
        }
        return response;
    }

}
