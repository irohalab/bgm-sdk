/**
 * Bangumi API
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-02-5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { Character } from '../model/character';
import { CharacterPerson } from '../model/characterPerson';
import { CharacterRevision } from '../model/characterRevision';
import { DetailedRevision } from '../model/detailedRevision';
import { EpType } from '../model/epType';
import { EpisodeDetail } from '../model/episodeDetail';
import { ErrorDetail } from '../model/errorDetail';
import { GetCalendar200ResponseInner } from '../model/getCalendar200ResponseInner';
import { GetMyself200Response } from '../model/getMyself200Response';
import { GetUserSubjectEpisodeCollection200Response } from '../model/getUserSubjectEpisodeCollection200Response';
import { Index } from '../model/index';
import { IndexBasicInfo } from '../model/indexBasicInfo';
import { IndexSubjectAddInfo } from '../model/indexSubjectAddInfo';
import { IndexSubjectEditInfo } from '../model/indexSubjectEditInfo';
import { LegacySubjectType } from '../model/legacySubjectType';
import { PagedCharacter } from '../model/pagedCharacter';
import { PagedEpisode } from '../model/pagedEpisode';
import { PagedPerson } from '../model/pagedPerson';
import { PagedRevision } from '../model/pagedRevision';
import { PagedSubject } from '../model/pagedSubject';
import { PagedUserCharacterCollection } from '../model/pagedUserCharacterCollection';
import { PagedUserCollection } from '../model/pagedUserCollection';
import { PagedUserPersonCollection } from '../model/pagedUserPersonCollection';
import { PatchUserSubjectEpisodeCollectionRequest } from '../model/patchUserSubjectEpisodeCollectionRequest';
import { PersonCharacter } from '../model/personCharacter';
import { PersonDetail } from '../model/personDetail';
import { PersonRevision } from '../model/personRevision';
import { PutUserEpisodeCollectionRequest } from '../model/putUserEpisodeCollectionRequest';
import { RelatedCharacter } from '../model/relatedCharacter';
import { RelatedPerson } from '../model/relatedPerson';
import { SearchCharactersRequest } from '../model/searchCharactersRequest';
import { SearchPersonsRequest } from '../model/searchPersonsRequest';
import { SearchSubjectByKeywords200Response } from '../model/searchSubjectByKeywords200Response';
import { SearchSubjectsRequest } from '../model/searchSubjectsRequest';
import { Subject } from '../model/subject';
import { SubjectCategory } from '../model/subjectCategory';
import { SubjectCollectionType } from '../model/subjectCollectionType';
import { SubjectRevision } from '../model/subjectRevision';
import { SubjectType } from '../model/subjectType';
import { User } from '../model/user';
import { UserCharacterCollection } from '../model/userCharacterCollection';
import { UserEpisodeCollection } from '../model/userEpisodeCollection';
import { UserPersonCollection } from '../model/userPersonCollection';
import { UserSubjectCollection } from '../model/userSubjectCollection';
import { UserSubjectCollectionModifyPayload } from '../model/userSubjectCollectionModifyPayload';
import { V0RelatedSubject } from '../model/v0RelatedSubject';
import { V0SubjectRelation } from '../model/v0SubjectRelation';

import { COLLECTION_FORMATS }  from '../variables';
import { DefaultServiceInterface }  from './default.serviceInterface';



@injectable()
export class DefaultService implements DefaultServiceInterface {
    private basePath: string = 'https://api.bgm.tv';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Add a subject to Index
     * 
     * @param index_id 目录 ID
     * @param IndexSubjectAddInfo 
     
     */
    public addSubjectToIndexByIndexId(index_id: number, IndexSubjectAddInfo?: IndexSubjectAddInfo, observe?: 'body', headers?: Headers): Observable<any>;
    public addSubjectToIndexByIndexId(index_id: number, IndexSubjectAddInfo?: IndexSubjectAddInfo, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public addSubjectToIndexByIndexId(index_id: number, IndexSubjectAddInfo?: IndexSubjectAddInfo, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling addSubjectToIndexByIndexId.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}/subjects`, IndexSubjectAddInfo , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Collect character for current user
     * 为当前用户收藏角色
     * @param character_id 角色 ID
     
     */
    public collectCharacterByCharacterIdAndUserId(character_id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public collectCharacterByCharacterIdAndUserId(character_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public collectCharacterByCharacterIdAndUserId(character_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling collectCharacterByCharacterIdAndUserId.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/v0/characters/${encodeURIComponent(String(character_id))}/collect`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Collect index for current user
     * 为当前用户收藏一条目录
     * @param index_id 目录 ID
     
     */
    public collectIndexByIndexIdAndUserId(index_id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public collectIndexByIndexIdAndUserId(index_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public collectIndexByIndexIdAndUserId(index_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling collectIndexByIndexIdAndUserId.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}/collect`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Collect person for current user
     * 为当前用户收藏人物
     * @param person_id 人物 ID
     
     */
    public collectPersonByPersonIdAndUserId(person_id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public collectPersonByPersonIdAndUserId(person_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public collectPersonByPersonIdAndUserId(person_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling collectPersonByPersonIdAndUserId.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/v0/persons/${encodeURIComponent(String(person_id))}/collect`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete a subject from a Index
     * 
     * @param index_id 目录 ID
     * @param subject_id 条目 ID
     
     */
    public delelteSubjectFromIndexByIndexIdAndSubjectID(index_id: number, subject_id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public delelteSubjectFromIndexByIndexIdAndSubjectID(index_id: number, subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public delelteSubjectFromIndexByIndexIdAndSubjectID(index_id: number, subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling delelteSubjectFromIndexByIndexIdAndSubjectID.');
        }

        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling delelteSubjectFromIndexByIndexIdAndSubjectID.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}/subjects/${encodeURIComponent(String(subject_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Edit index\&#39;s information
     * 
     * @param index_id 目录 ID
     * @param IndexBasicInfo 
     
     */
    public editIndexById(index_id: number, IndexBasicInfo?: IndexBasicInfo, observe?: 'body', headers?: Headers): Observable<Index>;
    public editIndexById(index_id: number, IndexBasicInfo?: IndexBasicInfo, observe?: 'response', headers?: Headers): Observable<HttpResponse<Index>>;
    public editIndexById(index_id: number, IndexBasicInfo?: IndexBasicInfo, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling editIndexById.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<Index>> = this.httpClient.put(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}`, IndexBasicInfo , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Index>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Edit subject information in a index
     * 如果条目不存在于目录，会创建该条目
     * @param index_id 目录 ID
     * @param subject_id 条目 ID
     * @param IndexSubjectEditInfo 
     
     */
    public editIndexSubjectsByIndexIdAndSubjectID(index_id: number, subject_id: number, IndexSubjectEditInfo?: IndexSubjectEditInfo, observe?: 'body', headers?: Headers): Observable<any>;
    public editIndexSubjectsByIndexIdAndSubjectID(index_id: number, subject_id: number, IndexSubjectEditInfo?: IndexSubjectEditInfo, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public editIndexSubjectsByIndexIdAndSubjectID(index_id: number, subject_id: number, IndexSubjectEditInfo?: IndexSubjectEditInfo, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling editIndexSubjectsByIndexIdAndSubjectID.');
        }

        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling editIndexSubjectsByIndexIdAndSubjectID.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}/subjects/${encodeURIComponent(String(subject_id))}`, IndexSubjectEditInfo , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 每日放送
     * 
     
     */
    public getCalendar(observe?: 'body', headers?: Headers): Observable<Array<GetCalendar200ResponseInner>>;
    public getCalendar(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<GetCalendar200ResponseInner>>>;
    public getCalendar(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<GetCalendar200ResponseInner>>> = this.httpClient.get(`${this.basePath}/calendar`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<GetCalendar200ResponseInner>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Character Detail
     * cache with 60s
     * @param character_id 角色 ID
     
     */
    public getCharacterById(character_id: number, observe?: 'body', headers?: Headers): Observable<Character>;
    public getCharacterById(character_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Character>>;
    public getCharacterById(character_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getCharacterById.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Character>> = this.httpClient.get(`${this.basePath}/v0/characters/${encodeURIComponent(String(character_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Character>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Character Image
     * 
     * @param character_id 角色 ID
     * @param type 枚举值 {small|grid|large|medium}
     
     */
    public getCharacterImageById(character_id: number, type: string, observe?: 'body', headers?: Headers): Observable<any>;
    public getCharacterImageById(character_id: number, type: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public getCharacterImageById(character_id: number, type: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getCharacterImageById.');
        }

        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling getCharacterImageById.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/v0/characters/${encodeURIComponent(String(character_id))}/image?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Character Revision
     * 
     * @param revision_id 版本 ID
     
     */
    public getCharacterRevisionByRevisionId(revision_id: number, observe?: 'body', headers?: Headers): Observable<CharacterRevision>;
    public getCharacterRevisionByRevisionId(revision_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<CharacterRevision>>;
    public getCharacterRevisionByRevisionId(revision_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (revision_id === null || revision_id === undefined){
            throw new Error('Required parameter revision_id was null or undefined when calling getCharacterRevisionByRevisionId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<CharacterRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/characters/${encodeURIComponent(String(revision_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CharacterRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Character Revisions
     * 
     * @param character_id 角色 ID
     * @param limit 分页参数
     * @param offset 分页参数
     
     */
    public getCharacterRevisions(character_id: number, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedRevision>;
    public getCharacterRevisions(character_id: number, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedRevision>>;
    public getCharacterRevisions(character_id: number, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getCharacterRevisions.');
        }

        let queryParameters: string[] = [];
        if (character_id !== undefined) {
            queryParameters.push('character_id='+encodeURIComponent(String(character_id)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/characters?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Episode
     * 
     * @param episode_id 章节 ID
     
     */
    public getEpisodeById(episode_id: number, observe?: 'body', headers?: Headers): Observable<EpisodeDetail>;
    public getEpisodeById(episode_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<EpisodeDetail>>;
    public getEpisodeById(episode_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (episode_id === null || episode_id === undefined){
            throw new Error('Required parameter episode_id was null or undefined when calling getEpisodeById.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<EpisodeDetail>> = this.httpClient.get(`${this.basePath}/v0/episodes/${encodeURIComponent(String(episode_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <EpisodeDetail>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Episode Revision
     * 
     * @param revision_id 版本 ID
     
     */
    public getEpisodeRevisionByRevisionId(revision_id: number, observe?: 'body', headers?: Headers): Observable<DetailedRevision>;
    public getEpisodeRevisionByRevisionId(revision_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<DetailedRevision>>;
    public getEpisodeRevisionByRevisionId(revision_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (revision_id === null || revision_id === undefined){
            throw new Error('Required parameter revision_id was null or undefined when calling getEpisodeRevisionByRevisionId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<DetailedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/episodes/${encodeURIComponent(String(revision_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DetailedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Episode Revisions
     * 
     * @param episode_id 章节 ID
     * @param limit 分页参数
     * @param offset 分页参数
     
     */
    public getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedRevision>;
    public getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedRevision>>;
    public getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (episode_id === null || episode_id === undefined){
            throw new Error('Required parameter episode_id was null or undefined when calling getEpisodeRevisions.');
        }

        let queryParameters: string[] = [];
        if (episode_id !== undefined) {
            queryParameters.push('episode_id='+encodeURIComponent(String(episode_id)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/episodes?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Episodes
     * 
     * @param subject_id 条目 ID
     * @param type 参照章节的&#x60;type&#x60;
     * @param limit 分页参数
     * @param offset 分页参数
     
     */
    public getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedEpisode>;
    public getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedEpisode>>;
    public getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getEpisodes.');
        }

        let queryParameters: string[] = [];
        if (subject_id !== undefined) {
            queryParameters.push('subject_id='+encodeURIComponent(String(subject_id)));
        }
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedEpisode>> = this.httpClient.get(`${this.basePath}/v0/episodes?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedEpisode>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Index By ID
     * 
     * @param index_id 目录 ID
     
     */
    public getIndexById(index_id: number, observe?: 'body', headers?: Headers): Observable<Index>;
    public getIndexById(index_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Index>>;
    public getIndexById(index_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling getIndexById.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Index>> = this.httpClient.get(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Index>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Index Subjects
     * 
     * @param index_id 目录 ID
     * @param type 条目类型
     * @param limit 分页参数
     * @param offset 分页参数
     
     */
    public getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<any>;
    public getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling getIndexSubjectsByIndexId.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}/subjects?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get User
     * 返回当前 Access Token 对应的用户信息
     
     */
    public getMyself(observe?: 'body', headers?: Headers): Observable<GetMyself200Response>;
    public getMyself(observe?: 'response', headers?: Headers): Observable<HttpResponse<GetMyself200Response>>;
    public getMyself(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetMyself200Response>> = this.httpClient.get(`${this.basePath}/v0/me`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetMyself200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Person
     * cache with 60s
     * @param person_id 人物 ID
     
     */
    public getPersonById(person_id: number, observe?: 'body', headers?: Headers): Observable<PersonDetail>;
    public getPersonById(person_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonDetail>>;
    public getPersonById(person_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getPersonById.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PersonDetail>> = this.httpClient.get(`${this.basePath}/v0/persons/${encodeURIComponent(String(person_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PersonDetail>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Person Image
     * 
     * @param person_id 人物 ID
     * @param type 枚举值 {small|grid|large|medium}
     
     */
    public getPersonImageById(person_id: number, type: string, observe?: 'body', headers?: Headers): Observable<any>;
    public getPersonImageById(person_id: number, type: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public getPersonImageById(person_id: number, type: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getPersonImageById.');
        }

        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling getPersonImageById.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/v0/persons/${encodeURIComponent(String(person_id))}/image?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Person Revision
     * 
     * @param revision_id 历史版本 ID
     
     */
    public getPersonRevisionByRevisionId(revision_id: number, observe?: 'body', headers?: Headers): Observable<PersonRevision>;
    public getPersonRevisionByRevisionId(revision_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PersonRevision>>;
    public getPersonRevisionByRevisionId(revision_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (revision_id === null || revision_id === undefined){
            throw new Error('Required parameter revision_id was null or undefined when calling getPersonRevisionByRevisionId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PersonRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/persons/${encodeURIComponent(String(revision_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PersonRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Person Revisions
     * 
     * @param person_id 角色 ID
     * @param limit 分页参数
     * @param offset 分页参数
     
     */
    public getPersonRevisions(person_id: number, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedRevision>;
    public getPersonRevisions(person_id: number, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedRevision>>;
    public getPersonRevisions(person_id: number, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getPersonRevisions.');
        }

        let queryParameters: string[] = [];
        if (person_id !== undefined) {
            queryParameters.push('person_id='+encodeURIComponent(String(person_id)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/persons?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * get person related characters
     * 
     * @param person_id 人物 ID
     
     */
    public getRelatedCharactersByPersonId(person_id: number, observe?: 'body', headers?: Headers): Observable<Array<PersonCharacter>>;
    public getRelatedCharactersByPersonId(person_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PersonCharacter>>>;
    public getRelatedCharactersByPersonId(person_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getRelatedCharactersByPersonId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<PersonCharacter>>> = this.httpClient.get(`${this.basePath}/v0/persons/${encodeURIComponent(String(person_id))}/characters`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<PersonCharacter>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Characters
     * 
     * @param subject_id 条目 ID
     
     */
    public getRelatedCharactersBySubjectId(subject_id: number, observe?: 'body', headers?: Headers): Observable<Array<RelatedCharacter>>;
    public getRelatedCharactersBySubjectId(subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<RelatedCharacter>>>;
    public getRelatedCharactersBySubjectId(subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getRelatedCharactersBySubjectId.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<RelatedCharacter>>> = this.httpClient.get(`${this.basePath}/v0/subjects/${encodeURIComponent(String(subject_id))}/characters`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<RelatedCharacter>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * get character related persons
     * 
     * @param character_id 角色 ID
     
     */
    public getRelatedPersonsByCharacterId(character_id: number, observe?: 'body', headers?: Headers): Observable<Array<CharacterPerson>>;
    public getRelatedPersonsByCharacterId(character_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<CharacterPerson>>>;
    public getRelatedPersonsByCharacterId(character_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getRelatedPersonsByCharacterId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<CharacterPerson>>> = this.httpClient.get(`${this.basePath}/v0/characters/${encodeURIComponent(String(character_id))}/persons`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<CharacterPerson>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Persons
     * 
     * @param subject_id 条目 ID
     
     */
    public getRelatedPersonsBySubjectId(subject_id: number, observe?: 'body', headers?: Headers): Observable<Array<RelatedPerson>>;
    public getRelatedPersonsBySubjectId(subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<RelatedPerson>>>;
    public getRelatedPersonsBySubjectId(subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getRelatedPersonsBySubjectId.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<RelatedPerson>>> = this.httpClient.get(`${this.basePath}/v0/subjects/${encodeURIComponent(String(subject_id))}/persons`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<RelatedPerson>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * get character related subjects
     * 
     * @param character_id 角色 ID
     
     */
    public getRelatedSubjectsByCharacterId(character_id: number, observe?: 'body', headers?: Headers): Observable<Array<V0RelatedSubject>>;
    public getRelatedSubjectsByCharacterId(character_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<V0RelatedSubject>>>;
    public getRelatedSubjectsByCharacterId(character_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getRelatedSubjectsByCharacterId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<V0RelatedSubject>>> = this.httpClient.get(`${this.basePath}/v0/characters/${encodeURIComponent(String(character_id))}/subjects`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<V0RelatedSubject>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * get person related subjects
     * 
     * @param person_id 人物 ID
     
     */
    public getRelatedSubjectsByPersonId(person_id: number, observe?: 'body', headers?: Headers): Observable<Array<V0RelatedSubject>>;
    public getRelatedSubjectsByPersonId(person_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<V0RelatedSubject>>>;
    public getRelatedSubjectsByPersonId(person_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getRelatedSubjectsByPersonId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<V0RelatedSubject>>> = this.httpClient.get(`${this.basePath}/v0/persons/${encodeURIComponent(String(person_id))}/subjects`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<V0RelatedSubject>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Relations
     * 
     * @param subject_id 条目 ID
     
     */
    public getRelatedSubjectsBySubjectId(subject_id: number, observe?: 'body', headers?: Headers): Observable<Array<V0SubjectRelation>>;
    public getRelatedSubjectsBySubjectId(subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<V0SubjectRelation>>>;
    public getRelatedSubjectsBySubjectId(subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getRelatedSubjectsBySubjectId.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<V0SubjectRelation>>> = this.httpClient.get(`${this.basePath}/v0/subjects/${encodeURIComponent(String(subject_id))}/subjects`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<V0SubjectRelation>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取条目
     * cache with 300s
     * @param subject_id 条目 ID
     
     */
    public getSubjectById(subject_id: number, observe?: 'body', headers?: Headers): Observable<Subject>;
    public getSubjectById(subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Subject>>;
    public getSubjectById(subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getSubjectById.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Subject>> = this.httpClient.get(`${this.basePath}/v0/subjects/${encodeURIComponent(String(subject_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Subject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Image
     * 
     * @param subject_id 条目 ID
     * @param type 枚举值 {small|grid|large|medium|common}
     
     */
    public getSubjectImageById(subject_id: number, type: string, observe?: 'body', headers?: Headers): Observable<any>;
    public getSubjectImageById(subject_id: number, type: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public getSubjectImageById(subject_id: number, type: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getSubjectImageById.');
        }

        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling getSubjectImageById.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/v0/subjects/${encodeURIComponent(String(subject_id))}/image?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Revision
     * 
     * @param revision_id 版本 ID
     
     */
    public getSubjectRevisionByRevisionId(revision_id: number, observe?: 'body', headers?: Headers): Observable<SubjectRevision>;
    public getSubjectRevisionByRevisionId(revision_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<SubjectRevision>>;
    public getSubjectRevisionByRevisionId(revision_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (revision_id === null || revision_id === undefined){
            throw new Error('Required parameter revision_id was null or undefined when calling getSubjectRevisionByRevisionId.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<SubjectRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/subjects/${encodeURIComponent(String(revision_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SubjectRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Subject Revisions
     * 
     * @param subject_id 条目 ID
     * @param limit 分页参数
     * @param offset 分页参数
     
     */
    public getSubjectRevisions(subject_id: number, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedRevision>;
    public getSubjectRevisions(subject_id: number, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedRevision>>;
    public getSubjectRevisions(subject_id: number, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getSubjectRevisions.');
        }

        let queryParameters: string[] = [];
        if (subject_id !== undefined) {
            queryParameters.push('subject_id='+encodeURIComponent(String(subject_id)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedRevision>> = this.httpClient.get(`${this.basePath}/v0/revisions/subjects?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedRevision>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 浏览条目
     * 第一页会 cache 24h，之后会 cache 1h
     * @param type 条目类型
     * @param cat 条目分类，参照 &#x60;SubjectCategory&#x60; enum
     * @param series 是否系列，仅对书籍类型的条目有效
     * @param platform 平台，仅对游戏类型的条目有效
     * @param sort 排序，枚举值 {date|rank}
     * @param year 年份
     * @param month 月份
     * @param limit 分页参数
     * @param offset 分页参数
     
     */
    public getSubjects(type: SubjectType, cat?: SubjectCategory, series?: boolean, platform?: string, sort?: string, year?: number, month?: number, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedSubject>;
    public getSubjects(type: SubjectType, cat?: SubjectCategory, series?: boolean, platform?: string, sort?: string, year?: number, month?: number, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedSubject>>;
    public getSubjects(type: SubjectType, cat?: SubjectCategory, series?: boolean, platform?: string, sort?: string, year?: number, month?: number, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling getSubjects.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (cat !== undefined) {
            queryParameters.push('cat='+encodeURIComponent(String(cat)));
        }
        if (series !== undefined) {
            queryParameters.push('series='+encodeURIComponent(String(series)));
        }
        if (platform !== undefined) {
            queryParameters.push('platform='+encodeURIComponent(String(platform)));
        }
        if (sort !== undefined) {
            queryParameters.push('sort='+encodeURIComponent(String(sort)));
        }
        if (year !== undefined) {
            queryParameters.push('year='+encodeURIComponent(String(year)));
        }
        if (month !== undefined) {
            queryParameters.push('month='+encodeURIComponent(String(month)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedSubject>> = this.httpClient.get(`${this.basePath}/v0/subjects?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedSubject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get User Avatar by name
     * 获取用户头像，302 重定向至头像地址，设置了 username 之后无法使用 UID 查询。
     * @param username 设置了用户名之后无法使用 UID。
     * @param type 枚举值 {small|large|medium}
     
     */
    public getUserAvatarByName(username: string, type: string, observe?: 'body', headers?: Headers): Observable<any>;
    public getUserAvatarByName(username: string, type: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public getUserAvatarByName(username: string, type: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserAvatarByName.');
        }

        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling getUserAvatarByName.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}/avatar?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get User by name
     * 获取用户信息
     * @param username 设置了用户名之后无法使用 UID。
     
     */
    public getUserByName(username: string, observe?: 'body', headers?: Headers): Observable<User>;
    public getUserByName(username: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<User>>;
    public getUserByName(username: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserByName.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<User>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <User>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取用户单个角色收藏信息
     * 
     * @param username 设置了用户名之后无法使用 UID。
     * @param character_id 角色 ID
     
     */
    public getUserCharacterCollection(username: string, character_id: number, observe?: 'body', headers?: Headers): Observable<UserCharacterCollection>;
    public getUserCharacterCollection(username: string, character_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<UserCharacterCollection>>;
    public getUserCharacterCollection(username: string, character_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserCharacterCollection.');
        }

        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling getUserCharacterCollection.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<UserCharacterCollection>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}/collections/-/characters/${encodeURIComponent(String(character_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UserCharacterCollection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取用户角色收藏列表
     * 
     * @param username 设置了用户名之后无法使用 UID。
     
     */
    public getUserCharacterCollections(username: string, observe?: 'body', headers?: Headers): Observable<PagedUserCharacterCollection>;
    public getUserCharacterCollections(username: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedUserCharacterCollection>>;
    public getUserCharacterCollections(username: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserCharacterCollections.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedUserCharacterCollection>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}/collections/-/characters`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedUserCharacterCollection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取用户单个条目收藏
     * 获取对应用户的收藏，查看私有收藏需要 access token
     * @param username 设置了用户名之后无法使用 UID。
     * @param subject_id 条目 ID
     
     */
    public getUserCollection(username: string, subject_id: number, observe?: 'body', headers?: Headers): Observable<UserSubjectCollection>;
    public getUserCollection(username: string, subject_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<UserSubjectCollection>>;
    public getUserCollection(username: string, subject_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserCollection.');
        }

        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getUserCollection.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<UserSubjectCollection>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}/collections/${encodeURIComponent(String(subject_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UserSubjectCollection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取用户收藏
     * 获取对应用户的收藏，查看私有收藏需要access token。
     * @param username 设置了用户名之后无法使用 UID。
     * @param subject_type 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
     * @param type 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
     * @param limit 分页参数
     * @param offset 分页参数
     
     */
    public getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: SubjectCollectionType, limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<PagedUserCollection>;
    public getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: SubjectCollectionType, limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedUserCollection>>;
    public getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: SubjectCollectionType, limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserCollectionsByUsername.');
        }

        let queryParameters: string[] = [];
        if (subject_type !== undefined) {
            queryParameters.push('subject_type='+encodeURIComponent(String(subject_type)));
        }
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedUserCollection>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}/collections?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedUserCollection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 章节收藏信息
     * 
     * @param episode_id 章节 ID
     
     */
    public getUserEpisodeCollection(episode_id: number, observe?: 'body', headers?: Headers): Observable<UserEpisodeCollection>;
    public getUserEpisodeCollection(episode_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<UserEpisodeCollection>>;
    public getUserEpisodeCollection(episode_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (episode_id === null || episode_id === undefined){
            throw new Error('Required parameter episode_id was null or undefined when calling getUserEpisodeCollection.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<UserEpisodeCollection>> = this.httpClient.get(`${this.basePath}/v0/users/-/collections/-/episodes/${encodeURIComponent(String(episode_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UserEpisodeCollection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取用户单个人物收藏信息
     * 
     * @param username 设置了用户名之后无法使用 UID。
     * @param person_id 人物 ID
     
     */
    public getUserPersonCollection(username: string, person_id: number, observe?: 'body', headers?: Headers): Observable<UserPersonCollection>;
    public getUserPersonCollection(username: string, person_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<UserPersonCollection>>;
    public getUserPersonCollection(username: string, person_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserPersonCollection.');
        }

        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling getUserPersonCollection.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<UserPersonCollection>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}/collections/-/persons/${encodeURIComponent(String(person_id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UserPersonCollection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 获取用户人物收藏列表
     * 
     * @param username 设置了用户名之后无法使用 UID。
     
     */
    public getUserPersonCollections(username: string, observe?: 'body', headers?: Headers): Observable<PagedUserPersonCollection>;
    public getUserPersonCollections(username: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedUserPersonCollection>>;
    public getUserPersonCollections(username: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling getUserPersonCollections.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PagedUserPersonCollection>> = this.httpClient.get(`${this.basePath}/v0/users/${encodeURIComponent(String(username))}/collections/-/persons`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedUserPersonCollection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 章节收藏信息
     * 
     * @param subject_id 条目 ID
     * @param offset 分页参数
     * @param limit 分页参数
     * @param episode_type 章节类型，不传则不按照章节进行筛选
     
     */
    public getUserSubjectEpisodeCollection(subject_id: number, offset?: number, limit?: number, episode_type?: EpType, observe?: 'body', headers?: Headers): Observable<GetUserSubjectEpisodeCollection200Response>;
    public getUserSubjectEpisodeCollection(subject_id: number, offset?: number, limit?: number, episode_type?: EpType, observe?: 'response', headers?: Headers): Observable<HttpResponse<GetUserSubjectEpisodeCollection200Response>>;
    public getUserSubjectEpisodeCollection(subject_id: number, offset?: number, limit?: number, episode_type?: EpType, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling getUserSubjectEpisodeCollection.');
        }

        let queryParameters: string[] = [];
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (episode_type !== undefined) {
            queryParameters.push('episode_type='+encodeURIComponent(String(episode_type)));
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GetUserSubjectEpisodeCollection200Response>> = this.httpClient.get(`${this.basePath}/v0/users/-/collections/${encodeURIComponent(String(subject_id))}/episodes?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GetUserSubjectEpisodeCollection200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create a new index
     * 
     
     */
    public newIndex(observe?: 'body', headers?: Headers): Observable<Index>;
    public newIndex(observe?: 'response', headers?: Headers): Observable<HttpResponse<Index>>;
    public newIndex(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Index>> = this.httpClient.post(`${this.basePath}/v0/indices`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Index>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 修改用户单个收藏
     * 修改条目收藏状态  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  PATCH 方法的所有请求体字段均可选 
     * @param subject_id 条目 ID
     * @param UserSubjectCollectionModifyPayload 
     
     */
    public patchUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, observe?: 'body', headers?: Headers): Observable<any>;
    public patchUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public patchUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling patchUserCollection.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.patch(`${this.basePath}/v0/users/-/collections/${encodeURIComponent(String(subject_id))}`, UserSubjectCollectionModifyPayload , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 章节收藏信息
     * 同时会重新计算条目的完成度 
     * @param subject_id 条目 ID
     * @param PatchUserSubjectEpisodeCollectionRequest 
     
     */
    public patchUserSubjectEpisodeCollection(subject_id: number, PatchUserSubjectEpisodeCollectionRequest?: PatchUserSubjectEpisodeCollectionRequest, observe?: 'body', headers?: Headers): Observable<any>;
    public patchUserSubjectEpisodeCollection(subject_id: number, PatchUserSubjectEpisodeCollectionRequest?: PatchUserSubjectEpisodeCollectionRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public patchUserSubjectEpisodeCollection(subject_id: number, PatchUserSubjectEpisodeCollectionRequest?: PatchUserSubjectEpisodeCollectionRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling patchUserSubjectEpisodeCollection.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.patch(`${this.basePath}/v0/users/-/collections/${encodeURIComponent(String(subject_id))}/episodes`, PatchUserSubjectEpisodeCollectionRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 新增或修改用户单个条目收藏
     * 修改条目收藏状态, 如果不存在则创建，如果存在则修改  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  方法的所有请求体字段均可选 
     * @param subject_id 条目 ID
     * @param UserSubjectCollectionModifyPayload 
     
     */
    public postUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, observe?: 'body', headers?: Headers): Observable<any>;
    public postUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public postUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (subject_id === null || subject_id === undefined){
            throw new Error('Required parameter subject_id was null or undefined when calling postUserCollection.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/v0/users/-/collections/${encodeURIComponent(String(subject_id))}`, UserSubjectCollectionModifyPayload , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 更新章节收藏信息
     * 
     * @param episode_id 章节 ID
     * @param PutUserEpisodeCollectionRequest 
     
     */
    public putUserEpisodeCollection(episode_id: number, PutUserEpisodeCollectionRequest?: PutUserEpisodeCollectionRequest, observe?: 'body', headers?: Headers): Observable<any>;
    public putUserEpisodeCollection(episode_id: number, PutUserEpisodeCollectionRequest?: PutUserEpisodeCollectionRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public putUserEpisodeCollection(episode_id: number, PutUserEpisodeCollectionRequest?: PutUserEpisodeCollectionRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (episode_id === null || episode_id === undefined){
            throw new Error('Required parameter episode_id was null or undefined when calling putUserEpisodeCollection.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/v0/users/-/collections/-/episodes/${encodeURIComponent(String(episode_id))}`, PutUserEpisodeCollectionRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 角色搜索
     * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - &#x60;nsfw&#x60;: 使用 &#x60;include&#x60; 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。 
     * @param limit 分页参数
     * @param offset 分页参数
     * @param SearchCharactersRequest 
     
     */
    public searchCharacters(limit?: number, offset?: number, SearchCharactersRequest?: SearchCharactersRequest, observe?: 'body', headers?: Headers): Observable<PagedCharacter>;
    public searchCharacters(limit?: number, offset?: number, SearchCharactersRequest?: SearchCharactersRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedCharacter>>;
    public searchCharacters(limit?: number, offset?: number, SearchCharactersRequest?: SearchCharactersRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<PagedCharacter>> = this.httpClient.post(`${this.basePath}/v0/search/characters?${queryParameters.join('&')}`, SearchCharactersRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedCharacter>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 人物搜索
     * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - &#x60;career&#x60;: 职业，可以多次出现。&#x60;且&#x60; 关系。  不同筛选条件之间为 &#x60;且&#x60; 
     * @param limit 分页参数
     * @param offset 分页参数
     * @param SearchPersonsRequest 
     
     */
    public searchPersons(limit?: number, offset?: number, SearchPersonsRequest?: SearchPersonsRequest, observe?: 'body', headers?: Headers): Observable<PagedPerson>;
    public searchPersons(limit?: number, offset?: number, SearchPersonsRequest?: SearchPersonsRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedPerson>>;
    public searchPersons(limit?: number, offset?: number, SearchPersonsRequest?: SearchPersonsRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<PagedPerson>> = this.httpClient.post(`${this.basePath}/v0/search/persons?${queryParameters.join('&')}`, SearchPersonsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedPerson>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 条目搜索
     * 
     * @param keywords 关键词 &lt;br&gt; 需要 URL Encode
     * @param type 条目类型，参考 [SubjectType](#model-Legacy_SubjectType)
     * @param responseGroup 返回数据大小 &lt;br&gt; 默认为 small
     * @param start 开始条数
     * @param max_results 每页条数 &lt;br&gt; 最多 25
     
     */
    public searchSubjectByKeywords(keywords: string, type?: LegacySubjectType, responseGroup?: 'small' | 'medium' | 'large', start?: number, max_results?: number, observe?: 'body', headers?: Headers): Observable<SearchSubjectByKeywords200Response>;
    public searchSubjectByKeywords(keywords: string, type?: LegacySubjectType, responseGroup?: 'small' | 'medium' | 'large', start?: number, max_results?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<SearchSubjectByKeywords200Response>>;
    public searchSubjectByKeywords(keywords: string, type?: LegacySubjectType, responseGroup?: 'small' | 'medium' | 'large', start?: number, max_results?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (keywords === null || keywords === undefined){
            throw new Error('Required parameter keywords was null or undefined when calling searchSubjectByKeywords.');
        }

        let queryParameters: string[] = [];
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (responseGroup !== undefined) {
            queryParameters.push('responseGroup='+encodeURIComponent(String(responseGroup)));
        }
        if (start !== undefined) {
            queryParameters.push('start='+encodeURIComponent(String(start)));
        }
        if (max_results !== undefined) {
            queryParameters.push('max_results='+encodeURIComponent(String(max_results)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<SearchSubjectByKeywords200Response>> = this.httpClient.get(`${this.basePath}/search/subject/${encodeURIComponent(String(keywords))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SearchSubjectByKeywords200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 条目搜索
     * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - &#x60;type&#x60;: 条目类型，参照 &#x60;SubjectType&#x60; enum， &#x60;或&#x60;。 - &#x60;tag&#x60;: 标签，可以多次出现。&#x60;且&#x60; 关系。 - &#x60;airdate&#x60;: 播出日期/发售日期。&#x60;且&#x60; 关系。 - &#x60;rating&#x60;: 用于搜索指定评分的条目。&#x60;且&#x60; 关系。 - &#x60;rank&#x60;: 用于搜索指定排名的条目。&#x60;且&#x60; 关系。 - &#x60;nsfw&#x60;: 使用 &#x60;include&#x60; 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。  不同筛选条件之间为 &#x60;且&#x60; 
     * @param limit 分页参数
     * @param offset 分页参数
     * @param SearchSubjectsRequest 
     
     */
    public searchSubjects(limit?: number, offset?: number, SearchSubjectsRequest?: SearchSubjectsRequest, observe?: 'body', headers?: Headers): Observable<PagedSubject>;
    public searchSubjects(limit?: number, offset?: number, SearchSubjectsRequest?: SearchSubjectsRequest, observe?: 'response', headers?: Headers): Observable<HttpResponse<PagedSubject>>;
    public searchSubjects(limit?: number, offset?: number, SearchSubjectsRequest?: SearchSubjectsRequest, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<PagedSubject>> = this.httpClient.post(`${this.basePath}/v0/search/subjects?${queryParameters.join('&')}`, SearchSubjectsRequest , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PagedSubject>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Uncollect character for current user
     * 为当前用户取消收藏角色
     * @param character_id 角色 ID
     
     */
    public uncollectCharacterByCharacterIdAndUserId(character_id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public uncollectCharacterByCharacterIdAndUserId(character_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public uncollectCharacterByCharacterIdAndUserId(character_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (character_id === null || character_id === undefined){
            throw new Error('Required parameter character_id was null or undefined when calling uncollectCharacterByCharacterIdAndUserId.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/v0/characters/${encodeURIComponent(String(character_id))}/collect`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Uncollect index for current user
     * 为当前用户取消收藏一条目录
     * @param index_id 目录 ID
     
     */
    public uncollectIndexByIndexIdAndUserId(index_id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public uncollectIndexByIndexIdAndUserId(index_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public uncollectIndexByIndexIdAndUserId(index_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (index_id === null || index_id === undefined){
            throw new Error('Required parameter index_id was null or undefined when calling uncollectIndexByIndexIdAndUserId.');
        }

        // authentication (HTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/v0/indices/${encodeURIComponent(String(index_id))}/collect`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Uncollect person for current user
     * 为当前用户取消收藏人物
     * @param person_id 人物 ID
     
     */
    public uncollectPersonByPersonIdAndUserId(person_id: number, observe?: 'body', headers?: Headers): Observable<any>;
    public uncollectPersonByPersonIdAndUserId(person_id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public uncollectPersonByPersonIdAndUserId(person_id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (person_id === null || person_id === undefined){
            throw new Error('Required parameter person_id was null or undefined when calling uncollectPersonByPersonIdAndUserId.');
        }

        // authentication (OptionalHTTPBearer) required
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/v0/persons/${encodeURIComponent(String(person_id))}/collect`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
