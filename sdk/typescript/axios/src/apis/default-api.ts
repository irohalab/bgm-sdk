/* tslint:disable */
/* eslint-disable */
/**
 * Bangumi API
 * 你可以在 <https://api.bgm.tv/v0/oauth/> 生成一个 Access Token  ## 建议客户端开发者指定一个带有 APP 名称和版本的 User Agent，而非使用 HTTP 请求库默认的 UA  各种请求库的默认 UA 在未来可能会被禁用。 
 *
 * The version of the OpenAPI document: 2022-05-3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CharacterDetail } from '../models';
// @ts-ignore
import { CharacterPerson } from '../models';
// @ts-ignore
import { CharacterRevision } from '../models';
// @ts-ignore
import { CollectionStatusType } from '../models';
// @ts-ignore
import { CollectionType } from '../models';
// @ts-ignore
import { DetailedRevision } from '../models';
// @ts-ignore
import { EpStatusType } from '../models';
// @ts-ignore
import { EpType } from '../models';
// @ts-ignore
import { EpisodeDetail } from '../models';
// @ts-ignore
import { ErrorDetail } from '../models';
// @ts-ignore
import { Index } from '../models';
// @ts-ignore
import { InlineResponse200 } from '../models';
// @ts-ignore
import { InlineResponse2001 } from '../models';
// @ts-ignore
import { InlineResponse2002 } from '../models';
// @ts-ignore
import { InlineResponse2003 } from '../models';
// @ts-ignore
import { InlineResponse2004 } from '../models';
// @ts-ignore
import { InlineResponse2005 } from '../models';
// @ts-ignore
import { PagedEpisode } from '../models';
// @ts-ignore
import { PagedIndexSubject } from '../models';
// @ts-ignore
import { PagedRevision } from '../models';
// @ts-ignore
import { PagedUserCollection } from '../models';
// @ts-ignore
import { PersonCharacter } from '../models';
// @ts-ignore
import { PersonDetail } from '../models';
// @ts-ignore
import { PersonRevision } from '../models';
// @ts-ignore
import { PolApiV0ModelsRelatedSubject } from '../models';
// @ts-ignore
import { PolApiV0ModelsSubjectRelatedSubject } from '../models';
// @ts-ignore
import { RelatedCharacter } from '../models';
// @ts-ignore
import { RelatedPerson } from '../models';
// @ts-ignore
import { ResponseGroup } from '../models';
// @ts-ignore
import { StatusCode } from '../models';
// @ts-ignore
import { Subject } from '../models';
// @ts-ignore
import { SubjectRevision } from '../models';
// @ts-ignore
import { SubjectType } from '../models';
// @ts-ignore
import { SubjectTypeName } from '../models';
// @ts-ignore
import { User1 } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 批量更新收视进度
         * @param {number} subject_id 条目 ID
         * @param {string} watched_eps 如看到 123 话则 POST &#x60;123&#x60; &lt;br&gt; 书籍条目传 watched_eps 与 watched_vols 至少其一
         * @param {string} [watched_vols] 如看到第 3 卷则 POST &#x60;3&#x60;, 仅对书籍条目有效
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUpdateEpisodeStatusBySubjectId: async (subject_id: number, watched_eps: string, watched_vols?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('batchUpdateEpisodeStatusBySubjectId', 'subject_id', subject_id)
            // verify required parameter 'watched_eps' is not null or undefined
            assertParamExists('batchUpdateEpisodeStatusBySubjectId', 'watched_eps', watched_eps)
            const localVarPath = `/subject/{subject_id}/update/watched_eps`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (watched_eps !== undefined) {
                localVarQueryParameter['watched_eps'] = watched_eps;
            }

            if (watched_vols !== undefined) {
                localVarQueryParameter['watched_vols'] = watched_vols;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 每日放送
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalendar: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/calendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * cache with 60s
         * @summary Get Character Detail
         * @param {number} character_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterById: async (character_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getCharacterById', 'character_id', character_id)
            const localVarPath = `/v0/characters/{character_id}`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Character Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterRevisionByRevisionId: async (revision_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'revision_id' is not null or undefined
            assertParamExists('getCharacterRevisionByRevisionId', 'revision_id', revision_id)
            const localVarPath = `/v0/revisions/characters/{revision_id}`
                .replace(`{${"revision_id"}}`, encodeURIComponent(String(revision_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Character Revisions
         * @param {number} character_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterRevisions: async (character_id: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getCharacterRevisions', 'character_id', character_id)
            const localVarPath = `/v0/revisions/characters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (character_id !== undefined) {
                localVarQueryParameter['character_id'] = character_id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取指定条目收藏信息
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionBySubjectId: async (subject_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getCollectionBySubjectId', 'subject_id', subject_id)
            const localVarPath = `/collection/{subject_id}`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Episode
         * @param {number} episode_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeById: async (episode_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'episode_id' is not null or undefined
            assertParamExists('getEpisodeById', 'episode_id', episode_id)
            const localVarPath = `/v0/episodes/{episode_id}`
                .replace(`{${"episode_id"}}`, encodeURIComponent(String(episode_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Episode Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeRevisionByRevisionId: async (revision_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'revision_id' is not null or undefined
            assertParamExists('getEpisodeRevisionByRevisionId', 'revision_id', revision_id)
            const localVarPath = `/v0/revisions/episodes/{revision_id}`
                .replace(`{${"revision_id"}}`, encodeURIComponent(String(revision_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Episode Revisions
         * @param {number} episode_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeRevisions: async (episode_id: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'episode_id' is not null or undefined
            assertParamExists('getEpisodeRevisions', 'episode_id', episode_id)
            const localVarPath = `/v0/revisions/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (episode_id !== undefined) {
                localVarQueryParameter['episode_id'] = episode_id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新收视进度
         * @param {number} id 章节 ID
         * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeStatus: async (id: number, status: EpStatusType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEpisodeStatus', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('getEpisodeStatus', 'status', status)
            const localVarPath = `/ep/{id}/status/{status}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Episodes
         * @param {number} subject_id 
         * @param {EpType} [type] 参照章节的&#x60;type&#x60;
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodes: async (subject_id: number, type?: EpType, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getEpisodes', 'subject_id', subject_id)
            const localVarPath = `/v0/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (subject_id !== undefined) {
                localVarQueryParameter['subject_id'] = subject_id;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Index By Id
         * @param {number} index_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexById: async (index_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('getIndexById', 'index_id', index_id)
            const localVarPath = `/v0/indices/{index_id}`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Index Subjects
         * @param {number} index_id 
         * @param {SubjectType} [type] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexSubjectsByIndexId: async (index_id: number, type?: SubjectType, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('getIndexSubjectsByIndexId', 'index_id', index_id)
            const localVarPath = `/v0/indices/{index_id}/subjects`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 返回当前 Access Token 对应的用户信息
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyself: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v0/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * cache with 60s
         * @summary Get Person
         * @param {number} person_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById: async (person_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getPersonById', 'person_id', person_id)
            const localVarPath = `/v0/persons/{person_id}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Person Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRevisionByRevisionId: async (revision_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'revision_id' is not null or undefined
            assertParamExists('getPersonRevisionByRevisionId', 'revision_id', revision_id)
            const localVarPath = `/v0/revisions/persons/{revision_id}`
                .replace(`{${"revision_id"}}`, encodeURIComponent(String(revision_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Person Revisions
         * @param {number} person_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRevisions: async (person_id: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getPersonRevisions', 'person_id', person_id)
            const localVarPath = `/v0/revisions/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get person related characters
         * @param {number} person_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCharactersByPersonId: async (person_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getRelatedCharactersByPersonId', 'person_id', person_id)
            const localVarPath = `/v0/persons/{person_id}/characters`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Characters
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCharactersBySubjectId: async (subject_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getRelatedCharactersBySubjectId', 'subject_id', subject_id)
            const localVarPath = `/v0/subjects/{subject_id}/characters`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get character related persons
         * @param {number} character_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedPersonsByCharacterId: async (character_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getRelatedPersonsByCharacterId', 'character_id', character_id)
            const localVarPath = `/v0/characters/{character_id}/persons`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Persons
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedPersonsBySubjectId: async (subject_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getRelatedPersonsBySubjectId', 'subject_id', subject_id)
            const localVarPath = `/v0/subjects/{subject_id}/persons`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get character related subjects
         * @param {number} character_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsByCharacterId: async (character_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getRelatedSubjectsByCharacterId', 'character_id', character_id)
            const localVarPath = `/v0/characters/{character_id}/subjects`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get person related subjects
         * @param {number} person_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsByPersonId: async (person_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getRelatedSubjectsByPersonId', 'person_id', person_id)
            const localVarPath = `/v0/persons/{person_id}/subjects`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Relations
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsBySubjectId: async (subject_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getRelatedSubjectsBySubjectId', 'subject_id', subject_id)
            const localVarPath = `/v0/subjects/{subject_id}/subjects`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * cache with 300s
         * @summary 获取条目
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectById: async (subject_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getSubjectById', 'subject_id', subject_id)
            const localVarPath = `/v0/subjects/{subject_id}`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectRevisionByRevisionId: async (revision_id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'revision_id' is not null or undefined
            assertParamExists('getSubjectRevisionByRevisionId', 'revision_id', revision_id)
            const localVarPath = `/v0/revisions/subjects/{revision_id}`
                .replace(`{${"revision_id"}}`, encodeURIComponent(String(revision_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Revisions
         * @param {number} subject_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectRevisions: async (subject_id: number, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getSubjectRevisions', 'subject_id', subject_id)
            const localVarPath = `/v0/revisions/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subject_id !== undefined) {
                localVarQueryParameter['subject_id'] = subject_id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取用户信息，设置了 username 之后无法使用 UID 查询。
         * @summary Get User by name
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName: async (username: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserByName', 'username', username)
            const localVarPath = `/v0/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户收藏统计
         * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
         * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserCollectionStatusByUsername: async (username: string, app_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserCollectionStatusByUsername', 'username', username)
            // verify required parameter 'app_id' is not null or undefined
            assertParamExists('getUserCollectionStatusByUsername', 'app_id', app_id)
            const localVarPath = `/user/{username}/collections/status`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (app_id !== undefined) {
                localVarQueryParameter['app_id'] = app_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户收藏概览
         * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
         * @param {SubjectTypeName} subject_type 条目类型，详见 [SubjectTypeName](#model-SubjectTypeName)
         * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
         * @param {number} [max_results] 显示条数 &lt;br&gt; 最多 25
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserCollectionsBySubjectType: async (username: string, subject_type: SubjectTypeName, app_id: string, max_results?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserCollectionsBySubjectType', 'username', username)
            // verify required parameter 'subject_type' is not null or undefined
            assertParamExists('getUserCollectionsBySubjectType', 'subject_type', subject_type)
            // verify required parameter 'app_id' is not null or undefined
            assertParamExists('getUserCollectionsBySubjectType', 'app_id', app_id)
            const localVarPath = `/user/{username}/collections/{subject_type}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"subject_type"}}`, encodeURIComponent(String(subject_type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (app_id !== undefined) {
                localVarQueryParameter['app_id'] = app_id;
            }

            if (max_results !== undefined) {
                localVarQueryParameter['max_results'] = max_results;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取对应用户的收藏，查看私有收藏需要access token。
         * @summary 获取用户收藏
         * @param {string} username 设置了 username 后无法使用UID
         * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
         * @param {CollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollectionsByUsername: async (username: string, subject_type?: SubjectType, type?: CollectionType, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserCollectionsByUsername', 'username', username)
            const localVarPath = `/v0/users/{username}/collections`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (subject_type !== undefined) {
                localVarQueryParameter['subject_type'] = subject_type;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 用户收视进度
         * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
         * @param {number} [subject_id] 条目 ID &lt;br&gt; 获取指定条目收视进度
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserProgressByUsername: async (username: string, subject_id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserProgressByUsername', 'username', username)
            const localVarPath = `/user/{username}/progress`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (subject_id !== undefined) {
                localVarQueryParameter['subject_id'] = subject_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 条目搜索
         * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
         * @param {SubjectType} [type] 条目类型，参考 [SubjectType](#model-SubjectType)
         * @param {ResponseGroup} [responseGroup] 返回数据大小，参考 [ResponseGroup](#model-ResponseGroup) &lt;br&gt; 默认为 small
         * @param {number} [start] 开始条数
         * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubjectByKeywords: async (keywords: string, type?: SubjectType, responseGroup?: ResponseGroup, start?: number, max_results?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keywords' is not null or undefined
            assertParamExists('searchSubjectByKeywords', 'keywords', keywords)
            const localVarPath = `/search/subject/{keywords}`
                .replace(`{${"keywords"}}`, encodeURIComponent(String(keywords)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (responseGroup !== undefined) {
                localVarQueryParameter['responseGroup'] = responseGroup;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (max_results !== undefined) {
                localVarQueryParameter['max_results'] = max_results;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 管理收藏。Content-type必须为multipart/form-data或application/x-www-form-urlencoded，参数都得放在body里。
         * @summary 管理收藏
         * @param {number} subject_id 条目 ID
         * @param {'create' | 'update'} action 收藏动作 &lt;br&gt; create &#x3D; 添加收藏 &lt;br&gt; update &#x3D; 更新收藏 &lt;br&gt; 可以统一使用 &#x60;update&#x60;，系统会自动判断需要新建还是更新收藏
         * @param {CollectionStatusType} status 
         * @param {string} [comment] 简评
         * @param {string} [tags] 标签 &lt;br&gt; 以半角空格分割
         * @param {number} [rating] 评分 &lt;br&gt; 1-10 &lt;br&gt; 不填默认重置为未评分
         * @param {number} [privacy] 收藏隐私 &lt;br&gt; 0 &#x3D; 公开 &lt;br&gt; 1 &#x3D; 私密 &lt;br&gt; 不填默认为0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollectionBySubjectIdWithAction: async (subject_id: number, action: 'create' | 'update', status: CollectionStatusType, comment?: string, tags?: string, rating?: number, privacy?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('updateCollectionBySubjectIdWithAction', 'subject_id', subject_id)
            // verify required parameter 'action' is not null or undefined
            assertParamExists('updateCollectionBySubjectIdWithAction', 'action', action)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateCollectionBySubjectIdWithAction', 'status', status)
            const localVarPath = `/collection/{subject_id}/{action}`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)))
                .replace(`{${"action"}}`, encodeURIComponent(String(action)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (status !== undefined) { 
                localVarFormParams.set('status', status as any);
            }
    
            if (comment !== undefined) { 
                localVarFormParams.set('comment', comment as any);
            }
    
            if (tags !== undefined) { 
                localVarFormParams.set('tags', tags as any);
            }
    
            if (rating !== undefined) { 
                localVarFormParams.set('rating', rating as any);
            }
    
            if (privacy !== undefined) { 
                localVarFormParams.set('privacy', privacy as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新收视进度
         * @param {number} id 章节 ID
         * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
         * @param {string} [ep_id] 使用 POST 批量更新 &lt;br&gt; 将章节以半角逗号分隔，如 &#x60;3697,3698,3699&#x60;。请求时 URL 中的 ep_id 为最后一个章节 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEpisodeStatus: async (id: number, status: EpStatusType, ep_id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEpisodeStatus', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('updateEpisodeStatus', 'status', status)
            const localVarPath = `/ep/{id}/status/{status}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"status"}}`, encodeURIComponent(String(status)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (ep_id !== undefined) {
                localVarQueryParameter['ep_id'] = ep_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 批量更新收视进度
         * @param {number} subject_id 条目 ID
         * @param {string} watched_eps 如看到 123 话则 POST &#x60;123&#x60; &lt;br&gt; 书籍条目传 watched_eps 与 watched_vols 至少其一
         * @param {string} [watched_vols] 如看到第 3 卷则 POST &#x60;3&#x60;, 仅对书籍条目有效
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchUpdateEpisodeStatusBySubjectId(subject_id: number, watched_eps: string, watched_vols?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchUpdateEpisodeStatusBySubjectId(subject_id, watched_eps, watched_vols, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 每日放送
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCalendar(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2003>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCalendar(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * cache with 60s
         * @summary Get Character Detail
         * @param {number} character_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterById(character_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CharacterDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharacterById(character_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Character Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CharacterRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharacterRevisionByRevisionId(revision_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Character Revisions
         * @param {number} character_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterRevisions(character_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharacterRevisions(character_id, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取指定条目收藏信息
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectionBySubjectId(subject_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectionBySubjectId(subject_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Episode
         * @param {number} episode_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodeById(episode_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpisodeDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEpisodeById(episode_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Episode Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodeRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEpisodeRevisionByRevisionId(revision_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Episode Revisions
         * @param {number} episode_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEpisodeRevisions(episode_id, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新收视进度
         * @param {number} id 章节 ID
         * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodeStatus(id: number, status: EpStatusType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEpisodeStatus(id, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Episodes
         * @param {number} subject_id 
         * @param {EpType} [type] 参照章节的&#x60;type&#x60;
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedEpisode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEpisodes(subject_id, type, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Index By Id
         * @param {number} index_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndexById(index_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Index>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndexById(index_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Index Subjects
         * @param {number} index_id 
         * @param {SubjectType} [type] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedIndexSubject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndexSubjectsByIndexId(index_id, type, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 返回当前 Access Token 对应的用户信息
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyself(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyself(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * cache with 60s
         * @summary Get Person
         * @param {number} person_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonById(person_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonById(person_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Person Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonRevisionByRevisionId(revision_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Person Revisions
         * @param {number} person_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonRevisions(person_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonRevisions(person_id, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get person related characters
         * @param {number} person_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedCharactersByPersonId(person_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PersonCharacter>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedCharactersByPersonId(person_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Subject Characters
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedCharactersBySubjectId(subject_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatedCharacter>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedCharactersBySubjectId(subject_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get character related persons
         * @param {number} character_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedPersonsByCharacterId(character_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CharacterPerson>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedPersonsByCharacterId(character_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Subject Persons
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedPersonsBySubjectId(subject_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatedPerson>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedPersonsBySubjectId(subject_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get character related subjects
         * @param {number} character_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedSubjectsByCharacterId(character_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PolApiV0ModelsRelatedSubject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedSubjectsByCharacterId(character_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get person related subjects
         * @param {number} person_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedSubjectsByPersonId(person_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PolApiV0ModelsRelatedSubject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedSubjectsByPersonId(person_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Subject Relations
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedSubjectsBySubjectId(subject_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PolApiV0ModelsSubjectRelatedSubject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedSubjectsBySubjectId(subject_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * cache with 300s
         * @summary 获取条目
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectById(subject_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectById(subject_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Subject Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectRevisionByRevisionId(revision_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Subject Revisions
         * @param {number} subject_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectRevisions(subject_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectRevisions(subject_id, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取用户信息，设置了 username 之后无法使用 UID 查询。
         * @summary Get User by name
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByName(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByName(username, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 用户收藏统计
         * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
         * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getUserCollectionStatusByUsername(username: string, app_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2001>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCollectionStatusByUsername(username, app_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 用户收藏概览
         * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
         * @param {SubjectTypeName} subject_type 条目类型，详见 [SubjectTypeName](#model-SubjectTypeName)
         * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
         * @param {number} [max_results] 显示条数 &lt;br&gt; 最多 25
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getUserCollectionsBySubjectType(username: string, subject_type: SubjectTypeName, app_id: string, max_results?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse200>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCollectionsBySubjectType(username, subject_type, app_id, max_results, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取对应用户的收藏，查看私有收藏需要access token。
         * @summary 获取用户收藏
         * @param {string} username 设置了 username 后无法使用UID
         * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
         * @param {CollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: CollectionType, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedUserCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCollectionsByUsername(username, subject_type, type, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 用户收视进度
         * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
         * @param {number} [subject_id] 条目 ID &lt;br&gt; 获取指定条目收视进度
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getUserProgressByUsername(username: string, subject_id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2002>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProgressByUsername(username, subject_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 条目搜索
         * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
         * @param {SubjectType} [type] 条目类型，参考 [SubjectType](#model-SubjectType)
         * @param {ResponseGroup} [responseGroup] 返回数据大小，参考 [ResponseGroup](#model-ResponseGroup) &lt;br&gt; 默认为 small
         * @param {number} [start] 开始条数
         * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSubjectByKeywords(keywords: string, type?: SubjectType, responseGroup?: ResponseGroup, start?: number, max_results?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSubjectByKeywords(keywords, type, responseGroup, start, max_results, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 管理收藏。Content-type必须为multipart/form-data或application/x-www-form-urlencoded，参数都得放在body里。
         * @summary 管理收藏
         * @param {number} subject_id 条目 ID
         * @param {'create' | 'update'} action 收藏动作 &lt;br&gt; create &#x3D; 添加收藏 &lt;br&gt; update &#x3D; 更新收藏 &lt;br&gt; 可以统一使用 &#x60;update&#x60;，系统会自动判断需要新建还是更新收藏
         * @param {CollectionStatusType} status 
         * @param {string} [comment] 简评
         * @param {string} [tags] 标签 &lt;br&gt; 以半角空格分割
         * @param {number} [rating] 评分 &lt;br&gt; 1-10 &lt;br&gt; 不填默认重置为未评分
         * @param {number} [privacy] 收藏隐私 &lt;br&gt; 0 &#x3D; 公开 &lt;br&gt; 1 &#x3D; 私密 &lt;br&gt; 不填默认为0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCollectionBySubjectIdWithAction(subject_id: number, action: 'create' | 'update', status: CollectionStatusType, comment?: string, tags?: string, rating?: number, privacy?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCollectionBySubjectIdWithAction(subject_id, action, status, comment, tags, rating, privacy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新收视进度
         * @param {number} id 章节 ID
         * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
         * @param {string} [ep_id] 使用 POST 批量更新 &lt;br&gt; 将章节以半角逗号分隔，如 &#x60;3697,3698,3699&#x60;。请求时 URL 中的 ep_id 为最后一个章节 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEpisodeStatus(id: number, status: EpStatusType, ep_id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusCode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEpisodeStatus(id, status, ep_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 批量更新收视进度
         * @param {number} subject_id 条目 ID
         * @param {string} watched_eps 如看到 123 话则 POST &#x60;123&#x60; &lt;br&gt; 书籍条目传 watched_eps 与 watched_vols 至少其一
         * @param {string} [watched_vols] 如看到第 3 卷则 POST &#x60;3&#x60;, 仅对书籍条目有效
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUpdateEpisodeStatusBySubjectId(subject_id: number, watched_eps: string, watched_vols?: string, options?: any): AxiosPromise<StatusCode> {
            return localVarFp.batchUpdateEpisodeStatusBySubjectId(subject_id, watched_eps, watched_vols, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 每日放送
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalendar(options?: any): AxiosPromise<Array<InlineResponse2003>> {
            return localVarFp.getCalendar(options).then((request) => request(axios, basePath));
        },
        /**
         * cache with 60s
         * @summary Get Character Detail
         * @param {number} character_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterById(character_id: number, options?: any): AxiosPromise<CharacterDetail> {
            return localVarFp.getCharacterById(character_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Character Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterRevisionByRevisionId(revision_id: number, options?: any): AxiosPromise<CharacterRevision> {
            return localVarFp.getCharacterRevisionByRevisionId(revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Character Revisions
         * @param {number} character_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterRevisions(character_id: number, limit?: number, offset?: number, options?: any): AxiosPromise<PagedRevision> {
            return localVarFp.getCharacterRevisions(character_id, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取指定条目收藏信息
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectionBySubjectId(subject_id: number, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.getCollectionBySubjectId(subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Episode
         * @param {number} episode_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeById(episode_id: number, options?: any): AxiosPromise<EpisodeDetail> {
            return localVarFp.getEpisodeById(episode_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Episode Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeRevisionByRevisionId(revision_id: number, options?: any): AxiosPromise<DetailedRevision> {
            return localVarFp.getEpisodeRevisionByRevisionId(revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Episode Revisions
         * @param {number} episode_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, options?: any): AxiosPromise<PagedRevision> {
            return localVarFp.getEpisodeRevisions(episode_id, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新收视进度
         * @param {number} id 章节 ID
         * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeStatus(id: number, status: EpStatusType, options?: any): AxiosPromise<StatusCode> {
            return localVarFp.getEpisodeStatus(id, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Episodes
         * @param {number} subject_id 
         * @param {EpType} [type] 参照章节的&#x60;type&#x60;
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, options?: any): AxiosPromise<PagedEpisode> {
            return localVarFp.getEpisodes(subject_id, type, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Index By Id
         * @param {number} index_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexById(index_id: number, options?: any): AxiosPromise<Index> {
            return localVarFp.getIndexById(index_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Index Subjects
         * @param {number} index_id 
         * @param {SubjectType} [type] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, options?: any): AxiosPromise<PagedIndexSubject> {
            return localVarFp.getIndexSubjectsByIndexId(index_id, type, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 返回当前 Access Token 对应的用户信息
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyself(options?: any): AxiosPromise<User1> {
            return localVarFp.getMyself(options).then((request) => request(axios, basePath));
        },
        /**
         * cache with 60s
         * @summary Get Person
         * @param {number} person_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById(person_id: number, options?: any): AxiosPromise<PersonDetail> {
            return localVarFp.getPersonById(person_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Person Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRevisionByRevisionId(revision_id: number, options?: any): AxiosPromise<PersonRevision> {
            return localVarFp.getPersonRevisionByRevisionId(revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Person Revisions
         * @param {number} person_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRevisions(person_id: number, limit?: number, offset?: number, options?: any): AxiosPromise<PagedRevision> {
            return localVarFp.getPersonRevisions(person_id, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get person related characters
         * @param {number} person_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCharactersByPersonId(person_id: number, options?: any): AxiosPromise<Array<PersonCharacter>> {
            return localVarFp.getRelatedCharactersByPersonId(person_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Characters
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCharactersBySubjectId(subject_id: number, options?: any): AxiosPromise<Array<RelatedCharacter>> {
            return localVarFp.getRelatedCharactersBySubjectId(subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get character related persons
         * @param {number} character_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedPersonsByCharacterId(character_id: number, options?: any): AxiosPromise<Array<CharacterPerson>> {
            return localVarFp.getRelatedPersonsByCharacterId(character_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Persons
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedPersonsBySubjectId(subject_id: number, options?: any): AxiosPromise<Array<RelatedPerson>> {
            return localVarFp.getRelatedPersonsBySubjectId(subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get character related subjects
         * @param {number} character_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsByCharacterId(character_id: number, options?: any): AxiosPromise<Array<PolApiV0ModelsRelatedSubject>> {
            return localVarFp.getRelatedSubjectsByCharacterId(character_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get person related subjects
         * @param {number} person_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsByPersonId(person_id: number, options?: any): AxiosPromise<Array<PolApiV0ModelsRelatedSubject>> {
            return localVarFp.getRelatedSubjectsByPersonId(person_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Relations
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsBySubjectId(subject_id: number, options?: any): AxiosPromise<Array<PolApiV0ModelsSubjectRelatedSubject>> {
            return localVarFp.getRelatedSubjectsBySubjectId(subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * cache with 300s
         * @summary 获取条目
         * @param {number} subject_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectById(subject_id: number, options?: any): AxiosPromise<Subject> {
            return localVarFp.getSubjectById(subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Revision
         * @param {number} revision_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectRevisionByRevisionId(revision_id: number, options?: any): AxiosPromise<SubjectRevision> {
            return localVarFp.getSubjectRevisionByRevisionId(revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Revisions
         * @param {number} subject_id 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectRevisions(subject_id: number, limit?: number, offset?: number, options?: any): AxiosPromise<PagedRevision> {
            return localVarFp.getSubjectRevisions(subject_id, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取用户信息，设置了 username 之后无法使用 UID 查询。
         * @summary Get User by name
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName(username: string, options?: any): AxiosPromise<User1> {
            return localVarFp.getUserByName(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户收藏统计
         * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
         * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserCollectionStatusByUsername(username: string, app_id: string, options?: any): AxiosPromise<Array<InlineResponse2001>> {
            return localVarFp.getUserCollectionStatusByUsername(username, app_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户收藏概览
         * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
         * @param {SubjectTypeName} subject_type 条目类型，详见 [SubjectTypeName](#model-SubjectTypeName)
         * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
         * @param {number} [max_results] 显示条数 &lt;br&gt; 最多 25
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserCollectionsBySubjectType(username: string, subject_type: SubjectTypeName, app_id: string, max_results?: number, options?: any): AxiosPromise<Array<InlineResponse200>> {
            return localVarFp.getUserCollectionsBySubjectType(username, subject_type, app_id, max_results, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取对应用户的收藏，查看私有收藏需要access token。
         * @summary 获取用户收藏
         * @param {string} username 设置了 username 后无法使用UID
         * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
         * @param {CollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: CollectionType, limit?: number, offset?: number, options?: any): AxiosPromise<PagedUserCollection> {
            return localVarFp.getUserCollectionsByUsername(username, subject_type, type, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 用户收视进度
         * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
         * @param {number} [subject_id] 条目 ID &lt;br&gt; 获取指定条目收视进度
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getUserProgressByUsername(username: string, subject_id?: number, options?: any): AxiosPromise<Array<InlineResponse2002>> {
            return localVarFp.getUserProgressByUsername(username, subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 条目搜索
         * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
         * @param {SubjectType} [type] 条目类型，参考 [SubjectType](#model-SubjectType)
         * @param {ResponseGroup} [responseGroup] 返回数据大小，参考 [ResponseGroup](#model-ResponseGroup) &lt;br&gt; 默认为 small
         * @param {number} [start] 开始条数
         * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubjectByKeywords(keywords: string, type?: SubjectType, responseGroup?: ResponseGroup, start?: number, max_results?: number, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.searchSubjectByKeywords(keywords, type, responseGroup, start, max_results, options).then((request) => request(axios, basePath));
        },
        /**
         * 管理收藏。Content-type必须为multipart/form-data或application/x-www-form-urlencoded，参数都得放在body里。
         * @summary 管理收藏
         * @param {number} subject_id 条目 ID
         * @param {'create' | 'update'} action 收藏动作 &lt;br&gt; create &#x3D; 添加收藏 &lt;br&gt; update &#x3D; 更新收藏 &lt;br&gt; 可以统一使用 &#x60;update&#x60;，系统会自动判断需要新建还是更新收藏
         * @param {CollectionStatusType} status 
         * @param {string} [comment] 简评
         * @param {string} [tags] 标签 &lt;br&gt; 以半角空格分割
         * @param {number} [rating] 评分 &lt;br&gt; 1-10 &lt;br&gt; 不填默认重置为未评分
         * @param {number} [privacy] 收藏隐私 &lt;br&gt; 0 &#x3D; 公开 &lt;br&gt; 1 &#x3D; 私密 &lt;br&gt; 不填默认为0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCollectionBySubjectIdWithAction(subject_id: number, action: 'create' | 'update', status: CollectionStatusType, comment?: string, tags?: string, rating?: number, privacy?: number, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.updateCollectionBySubjectIdWithAction(subject_id, action, status, comment, tags, rating, privacy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新收视进度
         * @param {number} id 章节 ID
         * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
         * @param {string} [ep_id] 使用 POST 批量更新 &lt;br&gt; 将章节以半角逗号分隔，如 &#x60;3697,3698,3699&#x60;。请求时 URL 中的 ep_id 为最后一个章节 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEpisodeStatus(id: number, status: EpStatusType, ep_id?: string, options?: any): AxiosPromise<StatusCode> {
            return localVarFp.updateEpisodeStatus(id, status, ep_id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary 批量更新收视进度
     * @param {number} subject_id 条目 ID
     * @param {string} watched_eps 如看到 123 话则 POST &#x60;123&#x60; &lt;br&gt; 书籍条目传 watched_eps 与 watched_vols 至少其一
     * @param {string} [watched_vols] 如看到第 3 卷则 POST &#x60;3&#x60;, 仅对书籍条目有效
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    batchUpdateEpisodeStatusBySubjectId(subject_id: number, watched_eps: string, watched_vols?: string, options?: AxiosRequestConfig): AxiosPromise<StatusCode>;

    /**
     * 
     * @summary 每日放送
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCalendar(options?: AxiosRequestConfig): AxiosPromise<Array<InlineResponse2003>>;

    /**
     * cache with 60s
     * @summary Get Character Detail
     * @param {number} character_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCharacterById(character_id: number, options?: AxiosRequestConfig): AxiosPromise<CharacterDetail>;

    /**
     * 
     * @summary Get Character Revision
     * @param {number} revision_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCharacterRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig): AxiosPromise<CharacterRevision>;

    /**
     * 
     * @summary Get Character Revisions
     * @param {number} character_id 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCharacterRevisions(character_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<PagedRevision>;

    /**
     * 
     * @summary 获取指定条目收藏信息
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCollectionBySubjectId(subject_id: number, options?: AxiosRequestConfig): AxiosPromise<InlineResponse2005>;

    /**
     * 
     * @summary Get Episode
     * @param {number} episode_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEpisodeById(episode_id: number, options?: AxiosRequestConfig): AxiosPromise<EpisodeDetail>;

    /**
     * 
     * @summary Get Episode Revision
     * @param {number} revision_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEpisodeRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig): AxiosPromise<DetailedRevision>;

    /**
     * 
     * @summary Get Episode Revisions
     * @param {number} episode_id 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<PagedRevision>;

    /**
     * 
     * @summary 更新收视进度
     * @param {number} id 章节 ID
     * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEpisodeStatus(id: number, status: EpStatusType, options?: AxiosRequestConfig): AxiosPromise<StatusCode>;

    /**
     * 
     * @summary Get Episodes
     * @param {number} subject_id 
     * @param {EpType} [type] 参照章节的&#x60;type&#x60;
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<PagedEpisode>;

    /**
     * 
     * @summary Get Index By Id
     * @param {number} index_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getIndexById(index_id: number, options?: AxiosRequestConfig): AxiosPromise<Index>;

    /**
     * 
     * @summary Get Index Subjects
     * @param {number} index_id 
     * @param {SubjectType} [type] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<PagedIndexSubject>;

    /**
     * 返回当前 Access Token 对应的用户信息
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMyself(options?: AxiosRequestConfig): AxiosPromise<User1>;

    /**
     * cache with 60s
     * @summary Get Person
     * @param {number} person_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPersonById(person_id: number, options?: AxiosRequestConfig): AxiosPromise<PersonDetail>;

    /**
     * 
     * @summary Get Person Revision
     * @param {number} revision_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPersonRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig): AxiosPromise<PersonRevision>;

    /**
     * 
     * @summary Get Person Revisions
     * @param {number} person_id 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPersonRevisions(person_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<PagedRevision>;

    /**
     * 
     * @summary get person related characters
     * @param {number} person_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedCharactersByPersonId(person_id: number, options?: AxiosRequestConfig): AxiosPromise<Array<PersonCharacter>>;

    /**
     * 
     * @summary Get Subject Characters
     * @param {number} subject_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedCharactersBySubjectId(subject_id: number, options?: AxiosRequestConfig): AxiosPromise<Array<RelatedCharacter>>;

    /**
     * 
     * @summary get character related persons
     * @param {number} character_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedPersonsByCharacterId(character_id: number, options?: AxiosRequestConfig): AxiosPromise<Array<CharacterPerson>>;

    /**
     * 
     * @summary Get Subject Persons
     * @param {number} subject_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedPersonsBySubjectId(subject_id: number, options?: AxiosRequestConfig): AxiosPromise<Array<RelatedPerson>>;

    /**
     * 
     * @summary get character related subjects
     * @param {number} character_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedSubjectsByCharacterId(character_id: number, options?: AxiosRequestConfig): AxiosPromise<Array<PolApiV0ModelsRelatedSubject>>;

    /**
     * 
     * @summary get person related subjects
     * @param {number} person_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedSubjectsByPersonId(person_id: number, options?: AxiosRequestConfig): AxiosPromise<Array<PolApiV0ModelsRelatedSubject>>;

    /**
     * 
     * @summary Get Subject Relations
     * @param {number} subject_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedSubjectsBySubjectId(subject_id: number, options?: AxiosRequestConfig): AxiosPromise<Array<PolApiV0ModelsSubjectRelatedSubject>>;

    /**
     * cache with 300s
     * @summary 获取条目
     * @param {number} subject_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubjectById(subject_id: number, options?: AxiosRequestConfig): AxiosPromise<Subject>;

    /**
     * 
     * @summary Get Subject Revision
     * @param {number} revision_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubjectRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig): AxiosPromise<SubjectRevision>;

    /**
     * 
     * @summary Get Subject Revisions
     * @param {number} subject_id 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubjectRevisions(subject_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<PagedRevision>;

    /**
     * 获取用户信息，设置了 username 之后无法使用 UID 查询。
     * @summary Get User by name
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserByName(username: string, options?: AxiosRequestConfig): AxiosPromise<User1>;

    /**
     * 
     * @summary 用户收藏统计
     * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
     * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserCollectionStatusByUsername(username: string, app_id: string, options?: AxiosRequestConfig): AxiosPromise<Array<InlineResponse2001>>;

    /**
     * 
     * @summary 用户收藏概览
     * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
     * @param {SubjectTypeName} subject_type 条目类型，详见 [SubjectTypeName](#model-SubjectTypeName)
     * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
     * @param {number} [max_results] 显示条数 &lt;br&gt; 最多 25
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserCollectionsBySubjectType(username: string, subject_type: SubjectTypeName, app_id: string, max_results?: number, options?: AxiosRequestConfig): AxiosPromise<Array<InlineResponse200>>;

    /**
     * 获取对应用户的收藏，查看私有收藏需要access token。
     * @summary 获取用户收藏
     * @param {string} username 设置了 username 后无法使用UID
     * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
     * @param {CollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: CollectionType, limit?: number, offset?: number, options?: AxiosRequestConfig): AxiosPromise<PagedUserCollection>;

    /**
     * 
     * @summary 用户收视进度
     * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
     * @param {number} [subject_id] 条目 ID &lt;br&gt; 获取指定条目收视进度
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserProgressByUsername(username: string, subject_id?: number, options?: AxiosRequestConfig): AxiosPromise<Array<InlineResponse2002>>;

    /**
     * 
     * @summary 条目搜索
     * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
     * @param {SubjectType} [type] 条目类型，参考 [SubjectType](#model-SubjectType)
     * @param {ResponseGroup} [responseGroup] 返回数据大小，参考 [ResponseGroup](#model-ResponseGroup) &lt;br&gt; 默认为 small
     * @param {number} [start] 开始条数
     * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    searchSubjectByKeywords(keywords: string, type?: SubjectType, responseGroup?: ResponseGroup, start?: number, max_results?: number, options?: AxiosRequestConfig): AxiosPromise<InlineResponse2004>;

    /**
     * 管理收藏。Content-type必须为multipart/form-data或application/x-www-form-urlencoded，参数都得放在body里。
     * @summary 管理收藏
     * @param {number} subject_id 条目 ID
     * @param {'create' | 'update'} action 收藏动作 &lt;br&gt; create &#x3D; 添加收藏 &lt;br&gt; update &#x3D; 更新收藏 &lt;br&gt; 可以统一使用 &#x60;update&#x60;，系统会自动判断需要新建还是更新收藏
     * @param {CollectionStatusType} status 
     * @param {string} [comment] 简评
     * @param {string} [tags] 标签 &lt;br&gt; 以半角空格分割
     * @param {number} [rating] 评分 &lt;br&gt; 1-10 &lt;br&gt; 不填默认重置为未评分
     * @param {number} [privacy] 收藏隐私 &lt;br&gt; 0 &#x3D; 公开 &lt;br&gt; 1 &#x3D; 私密 &lt;br&gt; 不填默认为0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateCollectionBySubjectIdWithAction(subject_id: number, action: 'create' | 'update', status: CollectionStatusType, comment?: string, tags?: string, rating?: number, privacy?: number, options?: AxiosRequestConfig): AxiosPromise<InlineResponse2005>;

    /**
     * 
     * @summary 更新收视进度
     * @param {number} id 章节 ID
     * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
     * @param {string} [ep_id] 使用 POST 批量更新 &lt;br&gt; 将章节以半角逗号分隔，如 &#x60;3697,3698,3699&#x60;。请求时 URL 中的 ep_id 为最后一个章节 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateEpisodeStatus(id: number, status: EpStatusType, ep_id?: string, options?: AxiosRequestConfig): AxiosPromise<StatusCode>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary 批量更新收视进度
     * @param {number} subject_id 条目 ID
     * @param {string} watched_eps 如看到 123 话则 POST &#x60;123&#x60; &lt;br&gt; 书籍条目传 watched_eps 与 watched_vols 至少其一
     * @param {string} [watched_vols] 如看到第 3 卷则 POST &#x60;3&#x60;, 仅对书籍条目有效
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public batchUpdateEpisodeStatusBySubjectId(subject_id: number, watched_eps: string, watched_vols?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).batchUpdateEpisodeStatusBySubjectId(subject_id, watched_eps, watched_vols, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 每日放送
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCalendar(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCalendar(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * cache with 60s
     * @summary Get Character Detail
     * @param {number} character_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCharacterById(character_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCharacterById(character_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Character Revision
     * @param {number} revision_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCharacterRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCharacterRevisionByRevisionId(revision_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Character Revisions
     * @param {number} character_id 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCharacterRevisions(character_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCharacterRevisions(character_id, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取指定条目收藏信息
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCollectionBySubjectId(subject_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCollectionBySubjectId(subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Episode
     * @param {number} episode_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEpisodeById(episode_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEpisodeById(episode_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Episode Revision
     * @param {number} revision_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEpisodeRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEpisodeRevisionByRevisionId(revision_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Episode Revisions
     * @param {number} episode_id 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEpisodeRevisions(episode_id, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新收视进度
     * @param {number} id 章节 ID
     * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEpisodeStatus(id: number, status: EpStatusType, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEpisodeStatus(id, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Episodes
     * @param {number} subject_id 
     * @param {EpType} [type] 参照章节的&#x60;type&#x60;
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEpisodes(subject_id, type, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Index By Id
     * @param {number} index_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIndexById(index_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIndexById(index_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Index Subjects
     * @param {number} index_id 
     * @param {SubjectType} [type] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIndexSubjectsByIndexId(index_id, type, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 返回当前 Access Token 对应的用户信息
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyself(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyself(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * cache with 60s
     * @summary Get Person
     * @param {number} person_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPersonById(person_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPersonById(person_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Person Revision
     * @param {number} revision_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPersonRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPersonRevisionByRevisionId(revision_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Person Revisions
     * @param {number} person_id 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPersonRevisions(person_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPersonRevisions(person_id, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get person related characters
     * @param {number} person_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedCharactersByPersonId(person_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedCharactersByPersonId(person_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Characters
     * @param {number} subject_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedCharactersBySubjectId(subject_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedCharactersBySubjectId(subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get character related persons
     * @param {number} character_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedPersonsByCharacterId(character_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedPersonsByCharacterId(character_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Persons
     * @param {number} subject_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedPersonsBySubjectId(subject_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedPersonsBySubjectId(subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get character related subjects
     * @param {number} character_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedSubjectsByCharacterId(character_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedSubjectsByCharacterId(character_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get person related subjects
     * @param {number} person_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedSubjectsByPersonId(person_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedSubjectsByPersonId(person_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Relations
     * @param {number} subject_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedSubjectsBySubjectId(subject_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedSubjectsBySubjectId(subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * cache with 300s
     * @summary 获取条目
     * @param {number} subject_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjectById(subject_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjectById(subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Revision
     * @param {number} revision_id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjectRevisionByRevisionId(revision_id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjectRevisionByRevisionId(revision_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Revisions
     * @param {number} subject_id 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjectRevisions(subject_id: number, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjectRevisions(subject_id, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取用户信息，设置了 username 之后无法使用 UID 查询。
     * @summary Get User by name
     * @param {string} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserByName(username: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserByName(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户收藏统计
     * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
     * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserCollectionStatusByUsername(username: string, app_id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserCollectionStatusByUsername(username, app_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户收藏概览
     * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
     * @param {SubjectTypeName} subject_type 条目类型，详见 [SubjectTypeName](#model-SubjectTypeName)
     * @param {string} app_id [https://bgm.tv/dev/app](https://bgm.tv/dev/app) 申请到的 App ID
     * @param {number} [max_results] 显示条数 &lt;br&gt; 最多 25
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserCollectionsBySubjectType(username: string, subject_type: SubjectTypeName, app_id: string, max_results?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserCollectionsBySubjectType(username, subject_type, app_id, max_results, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取对应用户的收藏，查看私有收藏需要access token。
     * @summary 获取用户收藏
     * @param {string} username 设置了 username 后无法使用UID
     * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
     * @param {CollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: CollectionType, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserCollectionsByUsername(username, subject_type, type, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 用户收视进度
     * @param {string} username 用户名 &lt;br&gt; 也可使用 UID
     * @param {number} [subject_id] 条目 ID &lt;br&gt; 获取指定条目收视进度
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserProgressByUsername(username: string, subject_id?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserProgressByUsername(username, subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 条目搜索
     * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
     * @param {SubjectType} [type] 条目类型，参考 [SubjectType](#model-SubjectType)
     * @param {ResponseGroup} [responseGroup] 返回数据大小，参考 [ResponseGroup](#model-ResponseGroup) &lt;br&gt; 默认为 small
     * @param {number} [start] 开始条数
     * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchSubjectByKeywords(keywords: string, type?: SubjectType, responseGroup?: ResponseGroup, start?: number, max_results?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchSubjectByKeywords(keywords, type, responseGroup, start, max_results, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 管理收藏。Content-type必须为multipart/form-data或application/x-www-form-urlencoded，参数都得放在body里。
     * @summary 管理收藏
     * @param {number} subject_id 条目 ID
     * @param {'create' | 'update'} action 收藏动作 &lt;br&gt; create &#x3D; 添加收藏 &lt;br&gt; update &#x3D; 更新收藏 &lt;br&gt; 可以统一使用 &#x60;update&#x60;，系统会自动判断需要新建还是更新收藏
     * @param {CollectionStatusType} status 
     * @param {string} [comment] 简评
     * @param {string} [tags] 标签 &lt;br&gt; 以半角空格分割
     * @param {number} [rating] 评分 &lt;br&gt; 1-10 &lt;br&gt; 不填默认重置为未评分
     * @param {number} [privacy] 收藏隐私 &lt;br&gt; 0 &#x3D; 公开 &lt;br&gt; 1 &#x3D; 私密 &lt;br&gt; 不填默认为0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCollectionBySubjectIdWithAction(subject_id: number, action: 'create' | 'update', status: CollectionStatusType, comment?: string, tags?: string, rating?: number, privacy?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCollectionBySubjectIdWithAction(subject_id, action, status, comment, tags, rating, privacy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新收视进度
     * @param {number} id 章节 ID
     * @param {EpStatusType} status 收视类型，参考 [EpStatusType](#model-EpStatusType)
     * @param {string} [ep_id] 使用 POST 批量更新 &lt;br&gt; 将章节以半角逗号分隔，如 &#x60;3697,3698,3699&#x60;。请求时 URL 中的 ep_id 为最后一个章节 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEpisodeStatus(id: number, status: EpStatusType, ep_id?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEpisodeStatus(id, status, ep_id, options).then((request) => request(this.axios, this.basePath));
    }
}
