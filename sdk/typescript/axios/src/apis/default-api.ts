/* tslint:disable */
/* eslint-disable */
/**
 * Bangumi API
 * 你可以在 <https://next.bgm.tv/demo/access-token> 生成一个 Access Token  ## [关于 User Agent](https://github.com/bangumi/api/blob/master/docs-raw/user%20agent.md)  如果你在使用中遇到了问题，请优先使用 GitHub issue 提交问题。在 bangumi 小组发帖可能无法得到及时反馈。 
 *
 * The version of the OpenAPI document: 2025-02-5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Character } from '../models';
// @ts-ignore
import type { CharacterPerson } from '../models';
// @ts-ignore
import type { CharacterRevision } from '../models';
// @ts-ignore
import type { DetailedRevision } from '../models';
// @ts-ignore
import type { EpType } from '../models';
// @ts-ignore
import type { EpisodeDetail } from '../models';
// @ts-ignore
import type { ErrorDetail } from '../models';
// @ts-ignore
import type { GetCalendar200ResponseInner } from '../models';
// @ts-ignore
import type { GetMyself200Response } from '../models';
// @ts-ignore
import type { GetUserSubjectEpisodeCollection200Response } from '../models';
// @ts-ignore
import type { Index } from '../models';
// @ts-ignore
import type { IndexBasicInfo } from '../models';
// @ts-ignore
import type { IndexSubjectAddInfo } from '../models';
// @ts-ignore
import type { IndexSubjectEditInfo } from '../models';
// @ts-ignore
import type { LegacySubjectType } from '../models';
// @ts-ignore
import type { PagedCharacter } from '../models';
// @ts-ignore
import type { PagedEpisode } from '../models';
// @ts-ignore
import type { PagedPerson } from '../models';
// @ts-ignore
import type { PagedRevision } from '../models';
// @ts-ignore
import type { PagedSubject } from '../models';
// @ts-ignore
import type { PagedUserCharacterCollection } from '../models';
// @ts-ignore
import type { PagedUserCollection } from '../models';
// @ts-ignore
import type { PagedUserPersonCollection } from '../models';
// @ts-ignore
import type { PatchUserSubjectEpisodeCollectionRequest } from '../models';
// @ts-ignore
import type { PersonCharacter } from '../models';
// @ts-ignore
import type { PersonDetail } from '../models';
// @ts-ignore
import type { PersonRevision } from '../models';
// @ts-ignore
import type { PutUserEpisodeCollectionRequest } from '../models';
// @ts-ignore
import type { RelatedCharacter } from '../models';
// @ts-ignore
import type { RelatedPerson } from '../models';
// @ts-ignore
import type { SearchCharactersRequest } from '../models';
// @ts-ignore
import type { SearchPersonsRequest } from '../models';
// @ts-ignore
import type { SearchSubjectByKeywords200Response } from '../models';
// @ts-ignore
import type { SearchSubjectsRequest } from '../models';
// @ts-ignore
import type { Subject } from '../models';
// @ts-ignore
import type { SubjectCategory } from '../models';
// @ts-ignore
import type { SubjectCollectionType } from '../models';
// @ts-ignore
import type { SubjectRevision } from '../models';
// @ts-ignore
import type { SubjectType } from '../models';
// @ts-ignore
import type { User } from '../models';
// @ts-ignore
import type { UserCharacterCollection } from '../models';
// @ts-ignore
import type { UserEpisodeCollection } from '../models';
// @ts-ignore
import type { UserPersonCollection } from '../models';
// @ts-ignore
import type { UserSubjectCollection } from '../models';
// @ts-ignore
import type { UserSubjectCollectionModifyPayload } from '../models';
// @ts-ignore
import type { V0RelatedSubject } from '../models';
// @ts-ignore
import type { V0SubjectRelation } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a subject to Index
         * @param {number} index_id 目录 ID
         * @param {IndexSubjectAddInfo} [IndexSubjectAddInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubjectToIndexByIndexId: async (index_id: number, IndexSubjectAddInfo?: IndexSubjectAddInfo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('addSubjectToIndexByIndexId', 'index_id', index_id)
            const localVarPath = `/v0/indices/{index_id}/subjects`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(IndexSubjectAddInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为当前用户收藏角色
         * @summary Collect character for current user
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectCharacterByCharacterIdAndUserId: async (character_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('collectCharacterByCharacterIdAndUserId', 'character_id', character_id)
            const localVarPath = `/v0/characters/{character_id}/collect`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为当前用户收藏一条目录
         * @summary Collect index for current user
         * @param {number} index_id 目录 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectIndexByIndexIdAndUserId: async (index_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('collectIndexByIndexIdAndUserId', 'index_id', index_id)
            const localVarPath = `/v0/indices/{index_id}/collect`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为当前用户收藏人物
         * @summary Collect person for current user
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectPersonByPersonIdAndUserId: async (person_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('collectPersonByPersonIdAndUserId', 'person_id', person_id)
            const localVarPath = `/v0/persons/{person_id}/collect`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a subject from a Index
         * @param {number} index_id 目录 ID
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delelteSubjectFromIndexByIndexIdAndSubjectID: async (index_id: number, subject_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('delelteSubjectFromIndexByIndexIdAndSubjectID', 'index_id', index_id)
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('delelteSubjectFromIndexByIndexIdAndSubjectID', 'subject_id', subject_id)
            const localVarPath = `/v0/indices/{index_id}/subjects/{subject_id}`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)))
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit index\'s information
         * @param {number} index_id 目录 ID
         * @param {IndexBasicInfo} [IndexBasicInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editIndexById: async (index_id: number, IndexBasicInfo?: IndexBasicInfo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('editIndexById', 'index_id', index_id)
            const localVarPath = `/v0/indices/{index_id}`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(IndexBasicInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 如果条目不存在于目录，会创建该条目
         * @summary Edit subject information in a index
         * @param {number} index_id 目录 ID
         * @param {number} subject_id 条目 ID
         * @param {IndexSubjectEditInfo} [IndexSubjectEditInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editIndexSubjectsByIndexIdAndSubjectID: async (index_id: number, subject_id: number, IndexSubjectEditInfo?: IndexSubjectEditInfo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('editIndexSubjectsByIndexIdAndSubjectID', 'index_id', index_id)
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('editIndexSubjectsByIndexIdAndSubjectID', 'subject_id', subject_id)
            const localVarPath = `/v0/indices/{index_id}/subjects/{subject_id}`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)))
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(IndexSubjectEditInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 每日放送
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalendar: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/calendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * cache with 60s
         * @summary Get Character Detail
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterById: async (character_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getCharacterById', 'character_id', character_id)
            const localVarPath = `/v0/characters/{character_id}`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Character Image
         * @param {number} character_id 角色 ID
         * @param {string} type 枚举值 {small|grid|large|medium}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterImageById: async (character_id: number, type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getCharacterImageById', 'character_id', character_id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getCharacterImageById', 'type', type)
            const localVarPath = `/v0/characters/{character_id}/image`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Character Revision
         * @param {number} revision_id 版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterRevisionByRevisionId: async (revision_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'revision_id' is not null or undefined
            assertParamExists('getCharacterRevisionByRevisionId', 'revision_id', revision_id)
            const localVarPath = `/v0/revisions/characters/{revision_id}`
                .replace(`{${"revision_id"}}`, encodeURIComponent(String(revision_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Character Revisions
         * @param {number} character_id 角色 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterRevisions: async (character_id: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getCharacterRevisions', 'character_id', character_id)
            const localVarPath = `/v0/revisions/characters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (character_id !== undefined) {
                localVarQueryParameter['character_id'] = character_id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Episode
         * @param {number} episode_id 章节 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeById: async (episode_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'episode_id' is not null or undefined
            assertParamExists('getEpisodeById', 'episode_id', episode_id)
            const localVarPath = `/v0/episodes/{episode_id}`
                .replace(`{${"episode_id"}}`, encodeURIComponent(String(episode_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Episode Revision
         * @param {number} revision_id 版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeRevisionByRevisionId: async (revision_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'revision_id' is not null or undefined
            assertParamExists('getEpisodeRevisionByRevisionId', 'revision_id', revision_id)
            const localVarPath = `/v0/revisions/episodes/{revision_id}`
                .replace(`{${"revision_id"}}`, encodeURIComponent(String(revision_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Episode Revisions
         * @param {number} episode_id 章节 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeRevisions: async (episode_id: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'episode_id' is not null or undefined
            assertParamExists('getEpisodeRevisions', 'episode_id', episode_id)
            const localVarPath = `/v0/revisions/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (episode_id !== undefined) {
                localVarQueryParameter['episode_id'] = episode_id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Episodes
         * @param {number} subject_id 条目 ID
         * @param {EpType} [type] 参照章节的&#x60;type&#x60;
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodes: async (subject_id: number, type?: EpType, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getEpisodes', 'subject_id', subject_id)
            const localVarPath = `/v0/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (subject_id !== undefined) {
                localVarQueryParameter['subject_id'] = subject_id;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Index By ID
         * @param {number} index_id 目录 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexById: async (index_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('getIndexById', 'index_id', index_id)
            const localVarPath = `/v0/indices/{index_id}`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Index Subjects
         * @param {number} index_id 目录 ID
         * @param {SubjectType} [type] 条目类型
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexSubjectsByIndexId: async (index_id: number, type?: SubjectType, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('getIndexSubjectsByIndexId', 'index_id', index_id)
            const localVarPath = `/v0/indices/{index_id}/subjects`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 返回当前 Access Token 对应的用户信息
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyself: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v0/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * cache with 60s
         * @summary Get Person
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById: async (person_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getPersonById', 'person_id', person_id)
            const localVarPath = `/v0/persons/{person_id}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Person Image
         * @param {number} person_id 人物 ID
         * @param {string} type 枚举值 {small|grid|large|medium}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImageById: async (person_id: number, type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getPersonImageById', 'person_id', person_id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getPersonImageById', 'type', type)
            const localVarPath = `/v0/persons/{person_id}/image`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Person Revision
         * @param {number} revision_id 历史版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRevisionByRevisionId: async (revision_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'revision_id' is not null or undefined
            assertParamExists('getPersonRevisionByRevisionId', 'revision_id', revision_id)
            const localVarPath = `/v0/revisions/persons/{revision_id}`
                .replace(`{${"revision_id"}}`, encodeURIComponent(String(revision_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Person Revisions
         * @param {number} person_id 角色 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRevisions: async (person_id: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getPersonRevisions', 'person_id', person_id)
            const localVarPath = `/v0/revisions/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (person_id !== undefined) {
                localVarQueryParameter['person_id'] = person_id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get person related characters
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCharactersByPersonId: async (person_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getRelatedCharactersByPersonId', 'person_id', person_id)
            const localVarPath = `/v0/persons/{person_id}/characters`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Characters
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCharactersBySubjectId: async (subject_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getRelatedCharactersBySubjectId', 'subject_id', subject_id)
            const localVarPath = `/v0/subjects/{subject_id}/characters`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get character related persons
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedPersonsByCharacterId: async (character_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getRelatedPersonsByCharacterId', 'character_id', character_id)
            const localVarPath = `/v0/characters/{character_id}/persons`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Persons
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedPersonsBySubjectId: async (subject_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getRelatedPersonsBySubjectId', 'subject_id', subject_id)
            const localVarPath = `/v0/subjects/{subject_id}/persons`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get character related subjects
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsByCharacterId: async (character_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getRelatedSubjectsByCharacterId', 'character_id', character_id)
            const localVarPath = `/v0/characters/{character_id}/subjects`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get person related subjects
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsByPersonId: async (person_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getRelatedSubjectsByPersonId', 'person_id', person_id)
            const localVarPath = `/v0/persons/{person_id}/subjects`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Relations
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsBySubjectId: async (subject_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getRelatedSubjectsBySubjectId', 'subject_id', subject_id)
            const localVarPath = `/v0/subjects/{subject_id}/subjects`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * cache with 300s
         * @summary 获取条目
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectById: async (subject_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getSubjectById', 'subject_id', subject_id)
            const localVarPath = `/v0/subjects/{subject_id}`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Image
         * @param {number} subject_id 条目 ID
         * @param {string} type 枚举值 {small|grid|large|medium|common}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectImageById: async (subject_id: number, type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getSubjectImageById', 'subject_id', subject_id)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getSubjectImageById', 'type', type)
            const localVarPath = `/v0/subjects/{subject_id}/image`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Revision
         * @param {number} revision_id 版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectRevisionByRevisionId: async (revision_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'revision_id' is not null or undefined
            assertParamExists('getSubjectRevisionByRevisionId', 'revision_id', revision_id)
            const localVarPath = `/v0/revisions/subjects/{revision_id}`
                .replace(`{${"revision_id"}}`, encodeURIComponent(String(revision_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subject Revisions
         * @param {number} subject_id 条目 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectRevisions: async (subject_id: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getSubjectRevisions', 'subject_id', subject_id)
            const localVarPath = `/v0/revisions/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subject_id !== undefined) {
                localVarQueryParameter['subject_id'] = subject_id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 第一页会 cache 24h，之后会 cache 1h
         * @summary 浏览条目
         * @param {SubjectType} type 条目类型
         * @param {SubjectCategory} [cat] 条目分类，参照 &#x60;SubjectCategory&#x60; enum
         * @param {boolean} [series] 是否系列，仅对书籍类型的条目有效
         * @param {string} [platform] 平台，仅对游戏类型的条目有效
         * @param {string} [sort] 排序，枚举值 {date|rank}
         * @param {number} [year] 年份
         * @param {number} [month] 月份
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjects: async (type: SubjectType, cat?: SubjectCategory, series?: boolean, platform?: string, sort?: string, year?: number, month?: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getSubjects', 'type', type)
            const localVarPath = `/v0/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (cat !== undefined) {
                for (const [key, value] of Object.entries(cat)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (series !== undefined) {
                localVarQueryParameter['series'] = series;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取用户头像，302 重定向至头像地址，设置了 username 之后无法使用 UID 查询。
         * @summary Get User Avatar by name
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {string} type 枚举值 {small|large|medium}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAvatarByName: async (username: string, type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserAvatarByName', 'username', username)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getUserAvatarByName', 'type', type)
            const localVarPath = `/v0/users/{username}/avatar`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取用户信息
         * @summary Get User by name
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserByName', 'username', username)
            const localVarPath = `/v0/users/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户单个角色收藏信息
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCharacterCollection: async (username: string, character_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserCharacterCollection', 'username', username)
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('getUserCharacterCollection', 'character_id', character_id)
            const localVarPath = `/v0/users/{username}/collections/-/characters/{character_id}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户角色收藏列表
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCharacterCollections: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserCharacterCollections', 'username', username)
            const localVarPath = `/v0/users/{username}/collections/-/characters`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取对应用户的收藏，查看私有收藏需要 access token
         * @summary 获取用户单个条目收藏
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollection: async (username: string, subject_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserCollection', 'username', username)
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getUserCollection', 'subject_id', subject_id)
            const localVarPath = `/v0/users/{username}/collections/{subject_id}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取对应用户的收藏，查看私有收藏需要access token。
         * @summary 获取用户收藏
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
         * @param {SubjectCollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollectionsByUsername: async (username: string, subject_type?: SubjectType, type?: SubjectCollectionType, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserCollectionsByUsername', 'username', username)
            const localVarPath = `/v0/users/{username}/collections`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (subject_type !== undefined) {
                localVarQueryParameter['subject_type'] = subject_type;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 章节收藏信息
         * @param {number} episode_id 章节 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEpisodeCollection: async (episode_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'episode_id' is not null or undefined
            assertParamExists('getUserEpisodeCollection', 'episode_id', episode_id)
            const localVarPath = `/v0/users/-/collections/-/episodes/{episode_id}`
                .replace(`{${"episode_id"}}`, encodeURIComponent(String(episode_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户单个人物收藏信息
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPersonCollection: async (username: string, person_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserPersonCollection', 'username', username)
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('getUserPersonCollection', 'person_id', person_id)
            const localVarPath = `/v0/users/{username}/collections/-/persons/{person_id}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户人物收藏列表
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPersonCollections: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getUserPersonCollections', 'username', username)
            const localVarPath = `/v0/users/{username}/collections/-/persons`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 章节收藏信息
         * @param {number} subject_id 条目 ID
         * @param {number} [offset] 分页参数
         * @param {number} [limit] 分页参数
         * @param {EpType} [episode_type] 章节类型，不传则不按照章节进行筛选
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubjectEpisodeCollection: async (subject_id: number, offset?: number, limit?: number, episode_type?: EpType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('getUserSubjectEpisodeCollection', 'subject_id', subject_id)
            const localVarPath = `/v0/users/-/collections/{subject_id}/episodes`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (episode_type !== undefined) {
                localVarQueryParameter['episode_type'] = episode_type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newIndex: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v0/indices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 修改条目收藏状态  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  PATCH 方法的所有请求体字段均可选 
         * @summary 修改用户单个收藏
         * @param {number} subject_id 条目 ID
         * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserCollection: async (subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('patchUserCollection', 'subject_id', subject_id)
            const localVarPath = `/v0/users/-/collections/{subject_id}`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UserSubjectCollectionModifyPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 同时会重新计算条目的完成度 
         * @summary 章节收藏信息
         * @param {number} subject_id 条目 ID
         * @param {PatchUserSubjectEpisodeCollectionRequest} [PatchUserSubjectEpisodeCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserSubjectEpisodeCollection: async (subject_id: number, PatchUserSubjectEpisodeCollectionRequest?: PatchUserSubjectEpisodeCollectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('patchUserSubjectEpisodeCollection', 'subject_id', subject_id)
            const localVarPath = `/v0/users/-/collections/{subject_id}/episodes`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchUserSubjectEpisodeCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 修改条目收藏状态, 如果不存在则创建，如果存在则修改  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  方法的所有请求体字段均可选 
         * @summary 新增或修改用户单个条目收藏
         * @param {number} subject_id 条目 ID
         * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserCollection: async (subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subject_id' is not null or undefined
            assertParamExists('postUserCollection', 'subject_id', subject_id)
            const localVarPath = `/v0/users/-/collections/{subject_id}`
                .replace(`{${"subject_id"}}`, encodeURIComponent(String(subject_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UserSubjectCollectionModifyPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新章节收藏信息
         * @param {number} episode_id 章节 ID
         * @param {PutUserEpisodeCollectionRequest} [PutUserEpisodeCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserEpisodeCollection: async (episode_id: number, PutUserEpisodeCollectionRequest?: PutUserEpisodeCollectionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'episode_id' is not null or undefined
            assertParamExists('putUserEpisodeCollection', 'episode_id', episode_id)
            const localVarPath = `/v0/users/-/collections/-/episodes/{episode_id}`
                .replace(`{${"episode_id"}}`, encodeURIComponent(String(episode_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PutUserEpisodeCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。 
         * @summary 角色搜索
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {SearchCharactersRequest} [SearchCharactersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCharacters: async (limit?: number, offset?: number, SearchCharactersRequest?: SearchCharactersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v0/search/characters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(SearchCharactersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `career`: 职业，可以多次出现。`且` 关系。  不同筛选条件之间为 `且` 
         * @summary 人物搜索
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {SearchPersonsRequest} [SearchPersonsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPersons: async (limit?: number, offset?: number, SearchPersonsRequest?: SearchPersonsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v0/search/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(SearchPersonsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 条目搜索
         * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
         * @param {LegacySubjectType} [type] 条目类型，参考 [SubjectType](#model-Legacy_SubjectType)
         * @param {SearchSubjectByKeywordsResponseGroupEnum} [responseGroup] 返回数据大小 &lt;br&gt; 默认为 small
         * @param {number} [start] 开始条数
         * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubjectByKeywords: async (keywords: string, type?: LegacySubjectType, responseGroup?: SearchSubjectByKeywordsResponseGroupEnum, start?: number, max_results?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keywords' is not null or undefined
            assertParamExists('searchSubjectByKeywords', 'keywords', keywords)
            const localVarPath = `/search/subject/{keywords}`
                .replace(`{${"keywords"}}`, encodeURIComponent(String(keywords)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (responseGroup !== undefined) {
                localVarQueryParameter['responseGroup'] = responseGroup;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (max_results !== undefined) {
                localVarQueryParameter['max_results'] = max_results;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `type`: 条目类型，参照 `SubjectType` enum， `或`。 - `tag`: 标签，可以多次出现。`且` 关系。 - `airdate`: 播出日期/发售日期。`且` 关系。 - `rating`: 用于搜索指定评分的条目。`且` 关系。 - `rank`: 用于搜索指定排名的条目。`且` 关系。 - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。  不同筛选条件之间为 `且` 
         * @summary 条目搜索
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {SearchSubjectsRequest} [SearchSubjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubjects: async (limit?: number, offset?: number, SearchSubjectsRequest?: SearchSubjectsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v0/search/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(SearchSubjectsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为当前用户取消收藏角色
         * @summary Uncollect character for current user
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncollectCharacterByCharacterIdAndUserId: async (character_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'character_id' is not null or undefined
            assertParamExists('uncollectCharacterByCharacterIdAndUserId', 'character_id', character_id)
            const localVarPath = `/v0/characters/{character_id}/collect`
                .replace(`{${"character_id"}}`, encodeURIComponent(String(character_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为当前用户取消收藏一条目录
         * @summary Uncollect index for current user
         * @param {number} index_id 目录 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncollectIndexByIndexIdAndUserId: async (index_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'index_id' is not null or undefined
            assertParamExists('uncollectIndexByIndexIdAndUserId', 'index_id', index_id)
            const localVarPath = `/v0/indices/{index_id}/collect`
                .replace(`{${"index_id"}}`, encodeURIComponent(String(index_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为当前用户取消收藏人物
         * @summary Uncollect person for current user
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncollectPersonByPersonIdAndUserId: async (person_id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'person_id' is not null or undefined
            assertParamExists('uncollectPersonByPersonIdAndUserId', 'person_id', person_id)
            const localVarPath = `/v0/persons/{person_id}/collect`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(person_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OptionalHTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a subject to Index
         * @param {number} index_id 目录 ID
         * @param {IndexSubjectAddInfo} [IndexSubjectAddInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSubjectToIndexByIndexId(index_id: number, IndexSubjectAddInfo?: IndexSubjectAddInfo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSubjectToIndexByIndexId(index_id, IndexSubjectAddInfo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addSubjectToIndexByIndexId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为当前用户收藏角色
         * @summary Collect character for current user
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectCharacterByCharacterIdAndUserId(character_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectCharacterByCharacterIdAndUserId(character_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectCharacterByCharacterIdAndUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为当前用户收藏一条目录
         * @summary Collect index for current user
         * @param {number} index_id 目录 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectIndexByIndexIdAndUserId(index_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectIndexByIndexIdAndUserId(index_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectIndexByIndexIdAndUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为当前用户收藏人物
         * @summary Collect person for current user
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectPersonByPersonIdAndUserId(person_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectPersonByPersonIdAndUserId(person_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.collectPersonByPersonIdAndUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a subject from a Index
         * @param {number} index_id 目录 ID
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delelteSubjectFromIndexByIndexIdAndSubjectID(index_id: number, subject_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delelteSubjectFromIndexByIndexIdAndSubjectID(index_id, subject_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.delelteSubjectFromIndexByIndexIdAndSubjectID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit index\'s information
         * @param {number} index_id 目录 ID
         * @param {IndexBasicInfo} [IndexBasicInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editIndexById(index_id: number, IndexBasicInfo?: IndexBasicInfo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Index>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editIndexById(index_id, IndexBasicInfo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editIndexById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 如果条目不存在于目录，会创建该条目
         * @summary Edit subject information in a index
         * @param {number} index_id 目录 ID
         * @param {number} subject_id 条目 ID
         * @param {IndexSubjectEditInfo} [IndexSubjectEditInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editIndexSubjectsByIndexIdAndSubjectID(index_id: number, subject_id: number, IndexSubjectEditInfo?: IndexSubjectEditInfo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editIndexSubjectsByIndexIdAndSubjectID(index_id, subject_id, IndexSubjectEditInfo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editIndexSubjectsByIndexIdAndSubjectID']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 每日放送
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCalendar(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetCalendar200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCalendar(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCalendar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * cache with 60s
         * @summary Get Character Detail
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterById(character_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Character>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharacterById(character_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCharacterById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Character Image
         * @param {number} character_id 角色 ID
         * @param {string} type 枚举值 {small|grid|large|medium}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterImageById(character_id: number, type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharacterImageById(character_id, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCharacterImageById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Character Revision
         * @param {number} revision_id 版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CharacterRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharacterRevisionByRevisionId(revision_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCharacterRevisionByRevisionId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Character Revisions
         * @param {number} character_id 角色 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCharacterRevisions(character_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCharacterRevisions(character_id, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCharacterRevisions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Episode
         * @param {number} episode_id 章节 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodeById(episode_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpisodeDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEpisodeById(episode_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getEpisodeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Episode Revision
         * @param {number} revision_id 版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodeRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DetailedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEpisodeRevisionByRevisionId(revision_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getEpisodeRevisionByRevisionId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Episode Revisions
         * @param {number} episode_id 章节 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEpisodeRevisions(episode_id, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getEpisodeRevisions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Episodes
         * @param {number} subject_id 条目 ID
         * @param {EpType} [type] 参照章节的&#x60;type&#x60;
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedEpisode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEpisodes(subject_id, type, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getEpisodes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Index By ID
         * @param {number} index_id 目录 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndexById(index_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Index>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndexById(index_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getIndexById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Index Subjects
         * @param {number} index_id 目录 ID
         * @param {SubjectType} [type] 条目类型
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndexSubjectsByIndexId(index_id, type, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getIndexSubjectsByIndexId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 返回当前 Access Token 对应的用户信息
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyself(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyself200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyself(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMyself']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * cache with 60s
         * @summary Get Person
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonById(person_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonById(person_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPersonById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Person Image
         * @param {number} person_id 人物 ID
         * @param {string} type 枚举值 {small|grid|large|medium}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonImageById(person_id: number, type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonImageById(person_id, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPersonImageById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Person Revision
         * @param {number} revision_id 历史版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonRevisionByRevisionId(revision_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPersonRevisionByRevisionId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Person Revisions
         * @param {number} person_id 角色 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonRevisions(person_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonRevisions(person_id, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPersonRevisions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get person related characters
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedCharactersByPersonId(person_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PersonCharacter>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedCharactersByPersonId(person_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRelatedCharactersByPersonId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Subject Characters
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedCharactersBySubjectId(subject_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatedCharacter>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedCharactersBySubjectId(subject_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRelatedCharactersBySubjectId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get character related persons
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedPersonsByCharacterId(character_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CharacterPerson>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedPersonsByCharacterId(character_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRelatedPersonsByCharacterId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Subject Persons
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedPersonsBySubjectId(subject_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelatedPerson>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedPersonsBySubjectId(subject_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRelatedPersonsBySubjectId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get character related subjects
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedSubjectsByCharacterId(character_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V0RelatedSubject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedSubjectsByCharacterId(character_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRelatedSubjectsByCharacterId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get person related subjects
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedSubjectsByPersonId(person_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V0RelatedSubject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedSubjectsByPersonId(person_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRelatedSubjectsByPersonId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Subject Relations
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelatedSubjectsBySubjectId(subject_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V0SubjectRelation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelatedSubjectsBySubjectId(subject_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getRelatedSubjectsBySubjectId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * cache with 300s
         * @summary 获取条目
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectById(subject_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectById(subject_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSubjectById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Subject Image
         * @param {number} subject_id 条目 ID
         * @param {string} type 枚举值 {small|grid|large|medium|common}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectImageById(subject_id: number, type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectImageById(subject_id, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSubjectImageById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Subject Revision
         * @param {number} revision_id 版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectRevisionByRevisionId(revision_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSubjectRevisionByRevisionId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Subject Revisions
         * @param {number} subject_id 条目 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjectRevisions(subject_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedRevision>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjectRevisions(subject_id, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSubjectRevisions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 第一页会 cache 24h，之后会 cache 1h
         * @summary 浏览条目
         * @param {SubjectType} type 条目类型
         * @param {SubjectCategory} [cat] 条目分类，参照 &#x60;SubjectCategory&#x60; enum
         * @param {boolean} [series] 是否系列，仅对书籍类型的条目有效
         * @param {string} [platform] 平台，仅对游戏类型的条目有效
         * @param {string} [sort] 排序，枚举值 {date|rank}
         * @param {number} [year] 年份
         * @param {number} [month] 月份
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubjects(type: SubjectType, cat?: SubjectCategory, series?: boolean, platform?: string, sort?: string, year?: number, month?: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedSubject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubjects(type, cat, series, platform, sort, year, month, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getSubjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取用户头像，302 重定向至头像地址，设置了 username 之后无法使用 UID 查询。
         * @summary Get User Avatar by name
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {string} type 枚举值 {small|large|medium}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAvatarByName(username: string, type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAvatarByName(username, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserAvatarByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取用户信息
         * @summary Get User by name
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByName(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByName(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取用户单个角色收藏信息
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCharacterCollection(username: string, character_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCharacterCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCharacterCollection(username, character_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserCharacterCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取用户角色收藏列表
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCharacterCollections(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedUserCharacterCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCharacterCollections(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserCharacterCollections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取对应用户的收藏，查看私有收藏需要 access token
         * @summary 获取用户单个条目收藏
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCollection(username: string, subject_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSubjectCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCollection(username, subject_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取对应用户的收藏，查看私有收藏需要access token。
         * @summary 获取用户收藏
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
         * @param {SubjectCollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: SubjectCollectionType, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedUserCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCollectionsByUsername(username, subject_type, type, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserCollectionsByUsername']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 章节收藏信息
         * @param {number} episode_id 章节 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserEpisodeCollection(episode_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEpisodeCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserEpisodeCollection(episode_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserEpisodeCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取用户单个人物收藏信息
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPersonCollection(username: string, person_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPersonCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPersonCollection(username, person_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserPersonCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取用户人物收藏列表
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPersonCollections(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedUserPersonCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPersonCollections(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserPersonCollections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 章节收藏信息
         * @param {number} subject_id 条目 ID
         * @param {number} [offset] 分页参数
         * @param {number} [limit] 分页参数
         * @param {EpType} [episode_type] 章节类型，不传则不按照章节进行筛选
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserSubjectEpisodeCollection(subject_id: number, offset?: number, limit?: number, episode_type?: EpType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserSubjectEpisodeCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSubjectEpisodeCollection(subject_id, offset, limit, episode_type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserSubjectEpisodeCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newIndex(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Index>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newIndex(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.newIndex']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 修改条目收藏状态  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  PATCH 方法的所有请求体字段均可选 
         * @summary 修改用户单个收藏
         * @param {number} subject_id 条目 ID
         * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUserCollection(subject_id, UserSubjectCollectionModifyPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchUserCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 同时会重新计算条目的完成度 
         * @summary 章节收藏信息
         * @param {number} subject_id 条目 ID
         * @param {PatchUserSubjectEpisodeCollectionRequest} [PatchUserSubjectEpisodeCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUserSubjectEpisodeCollection(subject_id: number, PatchUserSubjectEpisodeCollectionRequest?: PatchUserSubjectEpisodeCollectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUserSubjectEpisodeCollection(subject_id, PatchUserSubjectEpisodeCollectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchUserSubjectEpisodeCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 修改条目收藏状态, 如果不存在则创建，如果存在则修改  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  方法的所有请求体字段均可选 
         * @summary 新增或修改用户单个条目收藏
         * @param {number} subject_id 条目 ID
         * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserCollection(subject_id, UserSubjectCollectionModifyPayload, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postUserCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 更新章节收藏信息
         * @param {number} episode_id 章节 ID
         * @param {PutUserEpisodeCollectionRequest} [PutUserEpisodeCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserEpisodeCollection(episode_id: number, PutUserEpisodeCollectionRequest?: PutUserEpisodeCollectionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserEpisodeCollection(episode_id, PutUserEpisodeCollectionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putUserEpisodeCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。 
         * @summary 角色搜索
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {SearchCharactersRequest} [SearchCharactersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCharacters(limit?: number, offset?: number, SearchCharactersRequest?: SearchCharactersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedCharacter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCharacters(limit, offset, SearchCharactersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchCharacters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `career`: 职业，可以多次出现。`且` 关系。  不同筛选条件之间为 `且` 
         * @summary 人物搜索
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {SearchPersonsRequest} [SearchPersonsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPersons(limit?: number, offset?: number, SearchPersonsRequest?: SearchPersonsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedPerson>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPersons(limit, offset, SearchPersonsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchPersons']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 条目搜索
         * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
         * @param {LegacySubjectType} [type] 条目类型，参考 [SubjectType](#model-Legacy_SubjectType)
         * @param {SearchSubjectByKeywordsResponseGroupEnum} [responseGroup] 返回数据大小 &lt;br&gt; 默认为 small
         * @param {number} [start] 开始条数
         * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSubjectByKeywords(keywords: string, type?: LegacySubjectType, responseGroup?: SearchSubjectByKeywordsResponseGroupEnum, start?: number, max_results?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchSubjectByKeywords200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSubjectByKeywords(keywords, type, responseGroup, start, max_results, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchSubjectByKeywords']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `type`: 条目类型，参照 `SubjectType` enum， `或`。 - `tag`: 标签，可以多次出现。`且` 关系。 - `airdate`: 播出日期/发售日期。`且` 关系。 - `rating`: 用于搜索指定评分的条目。`且` 关系。 - `rank`: 用于搜索指定排名的条目。`且` 关系。 - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。  不同筛选条件之间为 `且` 
         * @summary 条目搜索
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {SearchSubjectsRequest} [SearchSubjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchSubjects(limit?: number, offset?: number, SearchSubjectsRequest?: SearchSubjectsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagedSubject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchSubjects(limit, offset, SearchSubjectsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchSubjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为当前用户取消收藏角色
         * @summary Uncollect character for current user
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uncollectCharacterByCharacterIdAndUserId(character_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uncollectCharacterByCharacterIdAndUserId(character_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uncollectCharacterByCharacterIdAndUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为当前用户取消收藏一条目录
         * @summary Uncollect index for current user
         * @param {number} index_id 目录 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uncollectIndexByIndexIdAndUserId(index_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uncollectIndexByIndexIdAndUserId(index_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uncollectIndexByIndexIdAndUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为当前用户取消收藏人物
         * @summary Uncollect person for current user
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uncollectPersonByPersonIdAndUserId(person_id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uncollectPersonByPersonIdAndUserId(person_id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uncollectPersonByPersonIdAndUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a subject to Index
         * @param {number} index_id 目录 ID
         * @param {IndexSubjectAddInfo} [IndexSubjectAddInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubjectToIndexByIndexId(index_id: number, IndexSubjectAddInfo?: IndexSubjectAddInfo, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addSubjectToIndexByIndexId(index_id, IndexSubjectAddInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 为当前用户收藏角色
         * @summary Collect character for current user
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectCharacterByCharacterIdAndUserId(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectCharacterByCharacterIdAndUserId(character_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 为当前用户收藏一条目录
         * @summary Collect index for current user
         * @param {number} index_id 目录 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectIndexByIndexIdAndUserId(index_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectIndexByIndexIdAndUserId(index_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 为当前用户收藏人物
         * @summary Collect person for current user
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectPersonByPersonIdAndUserId(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.collectPersonByPersonIdAndUserId(person_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a subject from a Index
         * @param {number} index_id 目录 ID
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delelteSubjectFromIndexByIndexIdAndSubjectID(index_id: number, subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delelteSubjectFromIndexByIndexIdAndSubjectID(index_id, subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit index\'s information
         * @param {number} index_id 目录 ID
         * @param {IndexBasicInfo} [IndexBasicInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editIndexById(index_id: number, IndexBasicInfo?: IndexBasicInfo, options?: RawAxiosRequestConfig): AxiosPromise<Index> {
            return localVarFp.editIndexById(index_id, IndexBasicInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 如果条目不存在于目录，会创建该条目
         * @summary Edit subject information in a index
         * @param {number} index_id 目录 ID
         * @param {number} subject_id 条目 ID
         * @param {IndexSubjectEditInfo} [IndexSubjectEditInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editIndexSubjectsByIndexIdAndSubjectID(index_id: number, subject_id: number, IndexSubjectEditInfo?: IndexSubjectEditInfo, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.editIndexSubjectsByIndexIdAndSubjectID(index_id, subject_id, IndexSubjectEditInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 每日放送
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCalendar(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCalendar200ResponseInner>> {
            return localVarFp.getCalendar(options).then((request) => request(axios, basePath));
        },
        /**
         * cache with 60s
         * @summary Get Character Detail
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterById(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Character> {
            return localVarFp.getCharacterById(character_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Character Image
         * @param {number} character_id 角色 ID
         * @param {string} type 枚举值 {small|grid|large|medium}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterImageById(character_id: number, type: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCharacterImageById(character_id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Character Revision
         * @param {number} revision_id 版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): AxiosPromise<CharacterRevision> {
            return localVarFp.getCharacterRevisionByRevisionId(revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Character Revisions
         * @param {number} character_id 角色 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCharacterRevisions(character_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedRevision> {
            return localVarFp.getCharacterRevisions(character_id, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Episode
         * @param {number} episode_id 章节 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeById(episode_id: number, options?: RawAxiosRequestConfig): AxiosPromise<EpisodeDetail> {
            return localVarFp.getEpisodeById(episode_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Episode Revision
         * @param {number} revision_id 版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): AxiosPromise<DetailedRevision> {
            return localVarFp.getEpisodeRevisionByRevisionId(revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Episode Revisions
         * @param {number} episode_id 章节 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedRevision> {
            return localVarFp.getEpisodeRevisions(episode_id, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Episodes
         * @param {number} subject_id 条目 ID
         * @param {EpType} [type] 参照章节的&#x60;type&#x60;
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedEpisode> {
            return localVarFp.getEpisodes(subject_id, type, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Index By ID
         * @param {number} index_id 目录 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexById(index_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Index> {
            return localVarFp.getIndexById(index_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Index Subjects
         * @param {number} index_id 目录 ID
         * @param {SubjectType} [type] 条目类型
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getIndexSubjectsByIndexId(index_id, type, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 返回当前 Access Token 对应的用户信息
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyself(options?: RawAxiosRequestConfig): AxiosPromise<GetMyself200Response> {
            return localVarFp.getMyself(options).then((request) => request(axios, basePath));
        },
        /**
         * cache with 60s
         * @summary Get Person
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonById(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<PersonDetail> {
            return localVarFp.getPersonById(person_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Person Image
         * @param {number} person_id 人物 ID
         * @param {string} type 枚举值 {small|grid|large|medium}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonImageById(person_id: number, type: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPersonImageById(person_id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Person Revision
         * @param {number} revision_id 历史版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): AxiosPromise<PersonRevision> {
            return localVarFp.getPersonRevisionByRevisionId(revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Person Revisions
         * @param {number} person_id 角色 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonRevisions(person_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedRevision> {
            return localVarFp.getPersonRevisions(person_id, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get person related characters
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCharactersByPersonId(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PersonCharacter>> {
            return localVarFp.getRelatedCharactersByPersonId(person_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Characters
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedCharactersBySubjectId(subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<RelatedCharacter>> {
            return localVarFp.getRelatedCharactersBySubjectId(subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get character related persons
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedPersonsByCharacterId(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CharacterPerson>> {
            return localVarFp.getRelatedPersonsByCharacterId(character_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Persons
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedPersonsBySubjectId(subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<RelatedPerson>> {
            return localVarFp.getRelatedPersonsBySubjectId(subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get character related subjects
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsByCharacterId(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<V0RelatedSubject>> {
            return localVarFp.getRelatedSubjectsByCharacterId(character_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get person related subjects
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsByPersonId(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<V0RelatedSubject>> {
            return localVarFp.getRelatedSubjectsByPersonId(person_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Relations
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedSubjectsBySubjectId(subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<V0SubjectRelation>> {
            return localVarFp.getRelatedSubjectsBySubjectId(subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * cache with 300s
         * @summary 获取条目
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectById(subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Subject> {
            return localVarFp.getSubjectById(subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Image
         * @param {number} subject_id 条目 ID
         * @param {string} type 枚举值 {small|grid|large|medium|common}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectImageById(subject_id: number, type: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSubjectImageById(subject_id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Revision
         * @param {number} revision_id 版本 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): AxiosPromise<SubjectRevision> {
            return localVarFp.getSubjectRevisionByRevisionId(revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subject Revisions
         * @param {number} subject_id 条目 ID
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectRevisions(subject_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedRevision> {
            return localVarFp.getSubjectRevisions(subject_id, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 第一页会 cache 24h，之后会 cache 1h
         * @summary 浏览条目
         * @param {SubjectType} type 条目类型
         * @param {SubjectCategory} [cat] 条目分类，参照 &#x60;SubjectCategory&#x60; enum
         * @param {boolean} [series] 是否系列，仅对书籍类型的条目有效
         * @param {string} [platform] 平台，仅对游戏类型的条目有效
         * @param {string} [sort] 排序，枚举值 {date|rank}
         * @param {number} [year] 年份
         * @param {number} [month] 月份
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjects(type: SubjectType, cat?: SubjectCategory, series?: boolean, platform?: string, sort?: string, year?: number, month?: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedSubject> {
            return localVarFp.getSubjects(type, cat, series, platform, sort, year, month, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取用户头像，302 重定向至头像地址，设置了 username 之后无法使用 UID 查询。
         * @summary Get User Avatar by name
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {string} type 枚举值 {small|large|medium}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAvatarByName(username: string, type: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getUserAvatarByName(username, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取用户信息
         * @summary Get User by name
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName(username: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserByName(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户单个角色收藏信息
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCharacterCollection(username: string, character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserCharacterCollection> {
            return localVarFp.getUserCharacterCollection(username, character_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户角色收藏列表
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCharacterCollections(username: string, options?: RawAxiosRequestConfig): AxiosPromise<PagedUserCharacterCollection> {
            return localVarFp.getUserCharacterCollections(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取对应用户的收藏，查看私有收藏需要 access token
         * @summary 获取用户单个条目收藏
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {number} subject_id 条目 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollection(username: string, subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserSubjectCollection> {
            return localVarFp.getUserCollection(username, subject_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取对应用户的收藏，查看私有收藏需要access token。
         * @summary 获取用户收藏
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
         * @param {SubjectCollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: SubjectCollectionType, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedUserCollection> {
            return localVarFp.getUserCollectionsByUsername(username, subject_type, type, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 章节收藏信息
         * @param {number} episode_id 章节 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEpisodeCollection(episode_id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserEpisodeCollection> {
            return localVarFp.getUserEpisodeCollection(episode_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户单个人物收藏信息
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPersonCollection(username: string, person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserPersonCollection> {
            return localVarFp.getUserPersonCollection(username, person_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取用户人物收藏列表
         * @param {string} username 设置了用户名之后无法使用 UID。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPersonCollections(username: string, options?: RawAxiosRequestConfig): AxiosPromise<PagedUserPersonCollection> {
            return localVarFp.getUserPersonCollections(username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 章节收藏信息
         * @param {number} subject_id 条目 ID
         * @param {number} [offset] 分页参数
         * @param {number} [limit] 分页参数
         * @param {EpType} [episode_type] 章节类型，不传则不按照章节进行筛选
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserSubjectEpisodeCollection(subject_id: number, offset?: number, limit?: number, episode_type?: EpType, options?: RawAxiosRequestConfig): AxiosPromise<GetUserSubjectEpisodeCollection200Response> {
            return localVarFp.getUserSubjectEpisodeCollection(subject_id, offset, limit, episode_type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newIndex(options?: RawAxiosRequestConfig): AxiosPromise<Index> {
            return localVarFp.newIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * 修改条目收藏状态  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  PATCH 方法的所有请求体字段均可选 
         * @summary 修改用户单个收藏
         * @param {number} subject_id 条目 ID
         * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.patchUserCollection(subject_id, UserSubjectCollectionModifyPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 同时会重新计算条目的完成度 
         * @summary 章节收藏信息
         * @param {number} subject_id 条目 ID
         * @param {PatchUserSubjectEpisodeCollectionRequest} [PatchUserSubjectEpisodeCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserSubjectEpisodeCollection(subject_id: number, PatchUserSubjectEpisodeCollectionRequest?: PatchUserSubjectEpisodeCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.patchUserSubjectEpisodeCollection(subject_id, PatchUserSubjectEpisodeCollectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 修改条目收藏状态, 如果不存在则创建，如果存在则修改  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  方法的所有请求体字段均可选 
         * @summary 新增或修改用户单个条目收藏
         * @param {number} subject_id 条目 ID
         * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postUserCollection(subject_id, UserSubjectCollectionModifyPayload, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新章节收藏信息
         * @param {number} episode_id 章节 ID
         * @param {PutUserEpisodeCollectionRequest} [PutUserEpisodeCollectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserEpisodeCollection(episode_id: number, PutUserEpisodeCollectionRequest?: PutUserEpisodeCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putUserEpisodeCollection(episode_id, PutUserEpisodeCollectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。 
         * @summary 角色搜索
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {SearchCharactersRequest} [SearchCharactersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCharacters(limit?: number, offset?: number, SearchCharactersRequest?: SearchCharactersRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedCharacter> {
            return localVarFp.searchCharacters(limit, offset, SearchCharactersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `career`: 职业，可以多次出现。`且` 关系。  不同筛选条件之间为 `且` 
         * @summary 人物搜索
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {SearchPersonsRequest} [SearchPersonsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPersons(limit?: number, offset?: number, SearchPersonsRequest?: SearchPersonsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedPerson> {
            return localVarFp.searchPersons(limit, offset, SearchPersonsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 条目搜索
         * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
         * @param {LegacySubjectType} [type] 条目类型，参考 [SubjectType](#model-Legacy_SubjectType)
         * @param {SearchSubjectByKeywordsResponseGroupEnum} [responseGroup] 返回数据大小 &lt;br&gt; 默认为 small
         * @param {number} [start] 开始条数
         * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubjectByKeywords(keywords: string, type?: LegacySubjectType, responseGroup?: SearchSubjectByKeywordsResponseGroupEnum, start?: number, max_results?: number, options?: RawAxiosRequestConfig): AxiosPromise<SearchSubjectByKeywords200Response> {
            return localVarFp.searchSubjectByKeywords(keywords, type, responseGroup, start, max_results, options).then((request) => request(axios, basePath));
        },
        /**
         * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `type`: 条目类型，参照 `SubjectType` enum， `或`。 - `tag`: 标签，可以多次出现。`且` 关系。 - `airdate`: 播出日期/发售日期。`且` 关系。 - `rating`: 用于搜索指定评分的条目。`且` 关系。 - `rank`: 用于搜索指定排名的条目。`且` 关系。 - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。  不同筛选条件之间为 `且` 
         * @summary 条目搜索
         * @param {number} [limit] 分页参数
         * @param {number} [offset] 分页参数
         * @param {SearchSubjectsRequest} [SearchSubjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSubjects(limit?: number, offset?: number, SearchSubjectsRequest?: SearchSubjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedSubject> {
            return localVarFp.searchSubjects(limit, offset, SearchSubjectsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 为当前用户取消收藏角色
         * @summary Uncollect character for current user
         * @param {number} character_id 角色 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncollectCharacterByCharacterIdAndUserId(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uncollectCharacterByCharacterIdAndUserId(character_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 为当前用户取消收藏一条目录
         * @summary Uncollect index for current user
         * @param {number} index_id 目录 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncollectIndexByIndexIdAndUserId(index_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uncollectIndexByIndexIdAndUserId(index_id, options).then((request) => request(axios, basePath));
        },
        /**
         * 为当前用户取消收藏人物
         * @summary Uncollect person for current user
         * @param {number} person_id 人物 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uncollectPersonByPersonIdAndUserId(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uncollectPersonByPersonIdAndUserId(person_id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Add a subject to Index
     * @param {number} index_id 目录 ID
     * @param {IndexSubjectAddInfo} [IndexSubjectAddInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    addSubjectToIndexByIndexId(index_id: number, IndexSubjectAddInfo?: IndexSubjectAddInfo, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 为当前用户收藏角色
     * @summary Collect character for current user
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectCharacterByCharacterIdAndUserId(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 为当前用户收藏一条目录
     * @summary Collect index for current user
     * @param {number} index_id 目录 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectIndexByIndexIdAndUserId(index_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 为当前用户收藏人物
     * @summary Collect person for current user
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    collectPersonByPersonIdAndUserId(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete a subject from a Index
     * @param {number} index_id 目录 ID
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    delelteSubjectFromIndexByIndexIdAndSubjectID(index_id: number, subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Edit index\'s information
     * @param {number} index_id 目录 ID
     * @param {IndexBasicInfo} [IndexBasicInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    editIndexById(index_id: number, IndexBasicInfo?: IndexBasicInfo, options?: RawAxiosRequestConfig): AxiosPromise<Index>;

    /**
     * 如果条目不存在于目录，会创建该条目
     * @summary Edit subject information in a index
     * @param {number} index_id 目录 ID
     * @param {number} subject_id 条目 ID
     * @param {IndexSubjectEditInfo} [IndexSubjectEditInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    editIndexSubjectsByIndexIdAndSubjectID(index_id: number, subject_id: number, IndexSubjectEditInfo?: IndexSubjectEditInfo, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 每日放送
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCalendar(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetCalendar200ResponseInner>>;

    /**
     * cache with 60s
     * @summary Get Character Detail
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCharacterById(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Character>;

    /**
     * 
     * @summary Get Character Image
     * @param {number} character_id 角色 ID
     * @param {string} type 枚举值 {small|grid|large|medium}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCharacterImageById(character_id: number, type: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get Character Revision
     * @param {number} revision_id 版本 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCharacterRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): AxiosPromise<CharacterRevision>;

    /**
     * 
     * @summary Get Character Revisions
     * @param {number} character_id 角色 ID
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCharacterRevisions(character_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedRevision>;

    /**
     * 
     * @summary Get Episode
     * @param {number} episode_id 章节 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEpisodeById(episode_id: number, options?: RawAxiosRequestConfig): AxiosPromise<EpisodeDetail>;

    /**
     * 
     * @summary Get Episode Revision
     * @param {number} revision_id 版本 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEpisodeRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): AxiosPromise<DetailedRevision>;

    /**
     * 
     * @summary Get Episode Revisions
     * @param {number} episode_id 章节 ID
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedRevision>;

    /**
     * 
     * @summary Get Episodes
     * @param {number} subject_id 条目 ID
     * @param {EpType} [type] 参照章节的&#x60;type&#x60;
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedEpisode>;

    /**
     * 
     * @summary Get Index By ID
     * @param {number} index_id 目录 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getIndexById(index_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Index>;

    /**
     * 
     * @summary Get Index Subjects
     * @param {number} index_id 目录 ID
     * @param {SubjectType} [type] 条目类型
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 返回当前 Access Token 对应的用户信息
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMyself(options?: RawAxiosRequestConfig): AxiosPromise<GetMyself200Response>;

    /**
     * cache with 60s
     * @summary Get Person
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPersonById(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<PersonDetail>;

    /**
     * 
     * @summary Get Person Image
     * @param {number} person_id 人物 ID
     * @param {string} type 枚举值 {small|grid|large|medium}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPersonImageById(person_id: number, type: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get Person Revision
     * @param {number} revision_id 历史版本 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPersonRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): AxiosPromise<PersonRevision>;

    /**
     * 
     * @summary Get Person Revisions
     * @param {number} person_id 角色 ID
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPersonRevisions(person_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedRevision>;

    /**
     * 
     * @summary get person related characters
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedCharactersByPersonId(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PersonCharacter>>;

    /**
     * 
     * @summary Get Subject Characters
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedCharactersBySubjectId(subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<RelatedCharacter>>;

    /**
     * 
     * @summary get character related persons
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedPersonsByCharacterId(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CharacterPerson>>;

    /**
     * 
     * @summary Get Subject Persons
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedPersonsBySubjectId(subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<RelatedPerson>>;

    /**
     * 
     * @summary get character related subjects
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedSubjectsByCharacterId(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<V0RelatedSubject>>;

    /**
     * 
     * @summary get person related subjects
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedSubjectsByPersonId(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<V0RelatedSubject>>;

    /**
     * 
     * @summary Get Subject Relations
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRelatedSubjectsBySubjectId(subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<V0SubjectRelation>>;

    /**
     * cache with 300s
     * @summary 获取条目
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubjectById(subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<Subject>;

    /**
     * 
     * @summary Get Subject Image
     * @param {number} subject_id 条目 ID
     * @param {string} type 枚举值 {small|grid|large|medium|common}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubjectImageById(subject_id: number, type: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get Subject Revision
     * @param {number} revision_id 版本 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubjectRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig): AxiosPromise<SubjectRevision>;

    /**
     * 
     * @summary Get Subject Revisions
     * @param {number} subject_id 条目 ID
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubjectRevisions(subject_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedRevision>;

    /**
     * 第一页会 cache 24h，之后会 cache 1h
     * @summary 浏览条目
     * @param {SubjectType} type 条目类型
     * @param {SubjectCategory} [cat] 条目分类，参照 &#x60;SubjectCategory&#x60; enum
     * @param {boolean} [series] 是否系列，仅对书籍类型的条目有效
     * @param {string} [platform] 平台，仅对游戏类型的条目有效
     * @param {string} [sort] 排序，枚举值 {date|rank}
     * @param {number} [year] 年份
     * @param {number} [month] 月份
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubjects(type: SubjectType, cat?: SubjectCategory, series?: boolean, platform?: string, sort?: string, year?: number, month?: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedSubject>;

    /**
     * 获取用户头像，302 重定向至头像地址，设置了 username 之后无法使用 UID 查询。
     * @summary Get User Avatar by name
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {string} type 枚举值 {small|large|medium}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserAvatarByName(username: string, type: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 获取用户信息
     * @summary Get User by name
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserByName(username: string, options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * 
     * @summary 获取用户单个角色收藏信息
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserCharacterCollection(username: string, character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserCharacterCollection>;

    /**
     * 
     * @summary 获取用户角色收藏列表
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserCharacterCollections(username: string, options?: RawAxiosRequestConfig): AxiosPromise<PagedUserCharacterCollection>;

    /**
     * 获取对应用户的收藏，查看私有收藏需要 access token
     * @summary 获取用户单个条目收藏
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserCollection(username: string, subject_id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserSubjectCollection>;

    /**
     * 获取对应用户的收藏，查看私有收藏需要access token。
     * @summary 获取用户收藏
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
     * @param {SubjectCollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: SubjectCollectionType, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagedUserCollection>;

    /**
     * 
     * @summary 章节收藏信息
     * @param {number} episode_id 章节 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserEpisodeCollection(episode_id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserEpisodeCollection>;

    /**
     * 
     * @summary 获取用户单个人物收藏信息
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserPersonCollection(username: string, person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<UserPersonCollection>;

    /**
     * 
     * @summary 获取用户人物收藏列表
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserPersonCollections(username: string, options?: RawAxiosRequestConfig): AxiosPromise<PagedUserPersonCollection>;

    /**
     * 
     * @summary 章节收藏信息
     * @param {number} subject_id 条目 ID
     * @param {number} [offset] 分页参数
     * @param {number} [limit] 分页参数
     * @param {EpType} [episode_type] 章节类型，不传则不按照章节进行筛选
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserSubjectEpisodeCollection(subject_id: number, offset?: number, limit?: number, episode_type?: EpType, options?: RawAxiosRequestConfig): AxiosPromise<GetUserSubjectEpisodeCollection200Response>;

    /**
     * 
     * @summary Create a new index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    newIndex(options?: RawAxiosRequestConfig): AxiosPromise<Index>;

    /**
     * 修改条目收藏状态  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  PATCH 方法的所有请求体字段均可选 
     * @summary 修改用户单个收藏
     * @param {number} subject_id 条目 ID
     * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    patchUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 同时会重新计算条目的完成度 
     * @summary 章节收藏信息
     * @param {number} subject_id 条目 ID
     * @param {PatchUserSubjectEpisodeCollectionRequest} [PatchUserSubjectEpisodeCollectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    patchUserSubjectEpisodeCollection(subject_id: number, PatchUserSubjectEpisodeCollectionRequest?: PatchUserSubjectEpisodeCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 修改条目收藏状态, 如果不存在则创建，如果存在则修改  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  方法的所有请求体字段均可选 
     * @summary 新增或修改用户单个条目收藏
     * @param {number} subject_id 条目 ID
     * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary 更新章节收藏信息
     * @param {number} episode_id 章节 ID
     * @param {PutUserEpisodeCollectionRequest} [PutUserEpisodeCollectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putUserEpisodeCollection(episode_id: number, PutUserEpisodeCollectionRequest?: PutUserEpisodeCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。 
     * @summary 角色搜索
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {SearchCharactersRequest} [SearchCharactersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    searchCharacters(limit?: number, offset?: number, SearchCharactersRequest?: SearchCharactersRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedCharacter>;

    /**
     * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `career`: 职业，可以多次出现。`且` 关系。  不同筛选条件之间为 `且` 
     * @summary 人物搜索
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {SearchPersonsRequest} [SearchPersonsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    searchPersons(limit?: number, offset?: number, SearchPersonsRequest?: SearchPersonsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedPerson>;

    /**
     * 
     * @summary 条目搜索
     * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
     * @param {LegacySubjectType} [type] 条目类型，参考 [SubjectType](#model-Legacy_SubjectType)
     * @param {SearchSubjectByKeywordsResponseGroupEnum} [responseGroup] 返回数据大小 &lt;br&gt; 默认为 small
     * @param {number} [start] 开始条数
     * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    searchSubjectByKeywords(keywords: string, type?: LegacySubjectType, responseGroup?: SearchSubjectByKeywordsResponseGroupEnum, start?: number, max_results?: number, options?: RawAxiosRequestConfig): AxiosPromise<SearchSubjectByKeywords200Response>;

    /**
     * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `type`: 条目类型，参照 `SubjectType` enum， `或`。 - `tag`: 标签，可以多次出现。`且` 关系。 - `airdate`: 播出日期/发售日期。`且` 关系。 - `rating`: 用于搜索指定评分的条目。`且` 关系。 - `rank`: 用于搜索指定排名的条目。`且` 关系。 - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。  不同筛选条件之间为 `且` 
     * @summary 条目搜索
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {SearchSubjectsRequest} [SearchSubjectsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    searchSubjects(limit?: number, offset?: number, SearchSubjectsRequest?: SearchSubjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagedSubject>;

    /**
     * 为当前用户取消收藏角色
     * @summary Uncollect character for current user
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    uncollectCharacterByCharacterIdAndUserId(character_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 为当前用户取消收藏一条目录
     * @summary Uncollect index for current user
     * @param {number} index_id 目录 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    uncollectIndexByIndexIdAndUserId(index_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 为当前用户取消收藏人物
     * @summary Uncollect person for current user
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    uncollectPersonByPersonIdAndUserId(person_id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Add a subject to Index
     * @param {number} index_id 目录 ID
     * @param {IndexSubjectAddInfo} [IndexSubjectAddInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSubjectToIndexByIndexId(index_id: number, IndexSubjectAddInfo?: IndexSubjectAddInfo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSubjectToIndexByIndexId(index_id, IndexSubjectAddInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为当前用户收藏角色
     * @summary Collect character for current user
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectCharacterByCharacterIdAndUserId(character_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectCharacterByCharacterIdAndUserId(character_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为当前用户收藏一条目录
     * @summary Collect index for current user
     * @param {number} index_id 目录 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectIndexByIndexIdAndUserId(index_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectIndexByIndexIdAndUserId(index_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为当前用户收藏人物
     * @summary Collect person for current user
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectPersonByPersonIdAndUserId(person_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectPersonByPersonIdAndUserId(person_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a subject from a Index
     * @param {number} index_id 目录 ID
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delelteSubjectFromIndexByIndexIdAndSubjectID(index_id: number, subject_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).delelteSubjectFromIndexByIndexIdAndSubjectID(index_id, subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit index\'s information
     * @param {number} index_id 目录 ID
     * @param {IndexBasicInfo} [IndexBasicInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editIndexById(index_id: number, IndexBasicInfo?: IndexBasicInfo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editIndexById(index_id, IndexBasicInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 如果条目不存在于目录，会创建该条目
     * @summary Edit subject information in a index
     * @param {number} index_id 目录 ID
     * @param {number} subject_id 条目 ID
     * @param {IndexSubjectEditInfo} [IndexSubjectEditInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editIndexSubjectsByIndexIdAndSubjectID(index_id: number, subject_id: number, IndexSubjectEditInfo?: IndexSubjectEditInfo, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editIndexSubjectsByIndexIdAndSubjectID(index_id, subject_id, IndexSubjectEditInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 每日放送
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCalendar(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCalendar(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * cache with 60s
     * @summary Get Character Detail
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCharacterById(character_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCharacterById(character_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Character Image
     * @param {number} character_id 角色 ID
     * @param {string} type 枚举值 {small|grid|large|medium}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCharacterImageById(character_id: number, type: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCharacterImageById(character_id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Character Revision
     * @param {number} revision_id 版本 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCharacterRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCharacterRevisionByRevisionId(revision_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Character Revisions
     * @param {number} character_id 角色 ID
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCharacterRevisions(character_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCharacterRevisions(character_id, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Episode
     * @param {number} episode_id 章节 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEpisodeById(episode_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEpisodeById(episode_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Episode Revision
     * @param {number} revision_id 版本 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEpisodeRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEpisodeRevisionByRevisionId(revision_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Episode Revisions
     * @param {number} episode_id 章节 ID
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEpisodeRevisions(episode_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEpisodeRevisions(episode_id, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Episodes
     * @param {number} subject_id 条目 ID
     * @param {EpType} [type] 参照章节的&#x60;type&#x60;
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEpisodes(subject_id: number, type?: EpType, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEpisodes(subject_id, type, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Index By ID
     * @param {number} index_id 目录 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIndexById(index_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIndexById(index_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Index Subjects
     * @param {number} index_id 目录 ID
     * @param {SubjectType} [type] 条目类型
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIndexSubjectsByIndexId(index_id: number, type?: SubjectType, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIndexSubjectsByIndexId(index_id, type, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 返回当前 Access Token 对应的用户信息
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyself(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMyself(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * cache with 60s
     * @summary Get Person
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPersonById(person_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPersonById(person_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Person Image
     * @param {number} person_id 人物 ID
     * @param {string} type 枚举值 {small|grid|large|medium}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPersonImageById(person_id: number, type: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPersonImageById(person_id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Person Revision
     * @param {number} revision_id 历史版本 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPersonRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPersonRevisionByRevisionId(revision_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Person Revisions
     * @param {number} person_id 角色 ID
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPersonRevisions(person_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPersonRevisions(person_id, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get person related characters
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedCharactersByPersonId(person_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedCharactersByPersonId(person_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Characters
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedCharactersBySubjectId(subject_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedCharactersBySubjectId(subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get character related persons
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedPersonsByCharacterId(character_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedPersonsByCharacterId(character_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Persons
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedPersonsBySubjectId(subject_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedPersonsBySubjectId(subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get character related subjects
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedSubjectsByCharacterId(character_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedSubjectsByCharacterId(character_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get person related subjects
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedSubjectsByPersonId(person_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedSubjectsByPersonId(person_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Relations
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRelatedSubjectsBySubjectId(subject_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRelatedSubjectsBySubjectId(subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * cache with 300s
     * @summary 获取条目
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjectById(subject_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjectById(subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Image
     * @param {number} subject_id 条目 ID
     * @param {string} type 枚举值 {small|grid|large|medium|common}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjectImageById(subject_id: number, type: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjectImageById(subject_id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Revision
     * @param {number} revision_id 版本 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjectRevisionByRevisionId(revision_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjectRevisionByRevisionId(revision_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subject Revisions
     * @param {number} subject_id 条目 ID
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjectRevisions(subject_id: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjectRevisions(subject_id, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 第一页会 cache 24h，之后会 cache 1h
     * @summary 浏览条目
     * @param {SubjectType} type 条目类型
     * @param {SubjectCategory} [cat] 条目分类，参照 &#x60;SubjectCategory&#x60; enum
     * @param {boolean} [series] 是否系列，仅对书籍类型的条目有效
     * @param {string} [platform] 平台，仅对游戏类型的条目有效
     * @param {string} [sort] 排序，枚举值 {date|rank}
     * @param {number} [year] 年份
     * @param {number} [month] 月份
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubjects(type: SubjectType, cat?: SubjectCategory, series?: boolean, platform?: string, sort?: string, year?: number, month?: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubjects(type, cat, series, platform, sort, year, month, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取用户头像，302 重定向至头像地址，设置了 username 之后无法使用 UID 查询。
     * @summary Get User Avatar by name
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {string} type 枚举值 {small|large|medium}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserAvatarByName(username: string, type: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserAvatarByName(username, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取用户信息
     * @summary Get User by name
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserByName(username: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserByName(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户单个角色收藏信息
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserCharacterCollection(username: string, character_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserCharacterCollection(username, character_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户角色收藏列表
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserCharacterCollections(username: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserCharacterCollections(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取对应用户的收藏，查看私有收藏需要 access token
     * @summary 获取用户单个条目收藏
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {number} subject_id 条目 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserCollection(username: string, subject_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserCollection(username, subject_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取对应用户的收藏，查看私有收藏需要access token。
     * @summary 获取用户收藏
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {SubjectType} [subject_type] 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
     * @param {SubjectCollectionType} [type] 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserCollectionsByUsername(username: string, subject_type?: SubjectType, type?: SubjectCollectionType, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserCollectionsByUsername(username, subject_type, type, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 章节收藏信息
     * @param {number} episode_id 章节 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserEpisodeCollection(episode_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserEpisodeCollection(episode_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户单个人物收藏信息
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserPersonCollection(username: string, person_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserPersonCollection(username, person_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取用户人物收藏列表
     * @param {string} username 设置了用户名之后无法使用 UID。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserPersonCollections(username: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserPersonCollections(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 章节收藏信息
     * @param {number} subject_id 条目 ID
     * @param {number} [offset] 分页参数
     * @param {number} [limit] 分页参数
     * @param {EpType} [episode_type] 章节类型，不传则不按照章节进行筛选
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserSubjectEpisodeCollection(subject_id: number, offset?: number, limit?: number, episode_type?: EpType, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserSubjectEpisodeCollection(subject_id, offset, limit, episode_type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public newIndex(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).newIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 修改条目收藏状态  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  PATCH 方法的所有请求体字段均可选 
     * @summary 修改用户单个收藏
     * @param {number} subject_id 条目 ID
     * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchUserCollection(subject_id, UserSubjectCollectionModifyPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 同时会重新计算条目的完成度 
     * @summary 章节收藏信息
     * @param {number} subject_id 条目 ID
     * @param {PatchUserSubjectEpisodeCollectionRequest} [PatchUserSubjectEpisodeCollectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchUserSubjectEpisodeCollection(subject_id: number, PatchUserSubjectEpisodeCollectionRequest?: PatchUserSubjectEpisodeCollectionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchUserSubjectEpisodeCollection(subject_id, PatchUserSubjectEpisodeCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 修改条目收藏状态, 如果不存在则创建，如果存在则修改  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  方法的所有请求体字段均可选 
     * @summary 新增或修改用户单个条目收藏
     * @param {number} subject_id 条目 ID
     * @param {UserSubjectCollectionModifyPayload} [UserSubjectCollectionModifyPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postUserCollection(subject_id: number, UserSubjectCollectionModifyPayload?: UserSubjectCollectionModifyPayload, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postUserCollection(subject_id, UserSubjectCollectionModifyPayload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新章节收藏信息
     * @param {number} episode_id 章节 ID
     * @param {PutUserEpisodeCollectionRequest} [PutUserEpisodeCollectionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putUserEpisodeCollection(episode_id: number, PutUserEpisodeCollectionRequest?: PutUserEpisodeCollectionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putUserEpisodeCollection(episode_id, PutUserEpisodeCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。 
     * @summary 角色搜索
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {SearchCharactersRequest} [SearchCharactersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchCharacters(limit?: number, offset?: number, SearchCharactersRequest?: SearchCharactersRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchCharacters(limit, offset, SearchCharactersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `career`: 职业，可以多次出现。`且` 关系。  不同筛选条件之间为 `且` 
     * @summary 人物搜索
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {SearchPersonsRequest} [SearchPersonsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchPersons(limit?: number, offset?: number, SearchPersonsRequest?: SearchPersonsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchPersons(limit, offset, SearchPersonsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 条目搜索
     * @param {string} keywords 关键词 &lt;br&gt; 需要 URL Encode
     * @param {LegacySubjectType} [type] 条目类型，参考 [SubjectType](#model-Legacy_SubjectType)
     * @param {SearchSubjectByKeywordsResponseGroupEnum} [responseGroup] 返回数据大小 &lt;br&gt; 默认为 small
     * @param {number} [start] 开始条数
     * @param {number} [max_results] 每页条数 &lt;br&gt; 最多 25
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchSubjectByKeywords(keywords: string, type?: LegacySubjectType, responseGroup?: SearchSubjectByKeywordsResponseGroupEnum, start?: number, max_results?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchSubjectByKeywords(keywords, type, responseGroup, start, max_results, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - `type`: 条目类型，参照 `SubjectType` enum， `或`。 - `tag`: 标签，可以多次出现。`且` 关系。 - `airdate`: 播出日期/发售日期。`且` 关系。 - `rating`: 用于搜索指定评分的条目。`且` 关系。 - `rank`: 用于搜索指定排名的条目。`且` 关系。 - `nsfw`: 使用 `include` 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。  不同筛选条件之间为 `且` 
     * @summary 条目搜索
     * @param {number} [limit] 分页参数
     * @param {number} [offset] 分页参数
     * @param {SearchSubjectsRequest} [SearchSubjectsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchSubjects(limit?: number, offset?: number, SearchSubjectsRequest?: SearchSubjectsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchSubjects(limit, offset, SearchSubjectsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为当前用户取消收藏角色
     * @summary Uncollect character for current user
     * @param {number} character_id 角色 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uncollectCharacterByCharacterIdAndUserId(character_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uncollectCharacterByCharacterIdAndUserId(character_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为当前用户取消收藏一条目录
     * @summary Uncollect index for current user
     * @param {number} index_id 目录 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uncollectIndexByIndexIdAndUserId(index_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uncollectIndexByIndexIdAndUserId(index_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为当前用户取消收藏人物
     * @summary Uncollect person for current user
     * @param {number} person_id 人物 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uncollectPersonByPersonIdAndUserId(person_id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uncollectPersonByPersonIdAndUserId(person_id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SearchSubjectByKeywordsResponseGroupEnum = {
    Small: 'small',
    Medium: 'medium',
    Large: 'large'
} as const;
export type SearchSubjectByKeywordsResponseGroupEnum = typeof SearchSubjectByKeywordsResponseGroupEnum[keyof typeof SearchSubjectByKeywordsResponseGroupEnum];
